{"meta":{"title":"柴德Fun","subtitle":null,"description":"学习笔记，心得分享","author":"柴德Fun","url":"https://gigsider.com","root":"/"},"pages":[{"title":"标签","date":"2018-01-04T16:00:00.000Z","updated":"2020-08-21T14:20:37.486Z","comments":true,"path":"tags/index.html","permalink":"https://gigsider.com/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-08-21T06:22:48.000Z","updated":"2020-08-21T14:20:57.802Z","comments":true,"path":"about/index.html","permalink":"https://gigsider.com/about/index.html","excerpt":"","text":"关于作者 南京邮电大学，软件工程专业，大四学生。 关于本站 本站内容以技术积累为主，但不排除写一些其他方面的内容。本站使用的主题为Butterfly。"},{"title":"分类","date":"2018-01-04T16:00:00.000Z","updated":"2020-08-21T14:20:50.852Z","comments":true,"path":"categories/index.html","permalink":"https://gigsider.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-06-07T14:17:49.000Z","updated":"2020-08-21T14:20:43.972Z","comments":true,"path":"link/index.html","permalink":"https://gigsider.com/link/index.html","excerpt":"","text":""}],"posts":[{"title":"浅析 GC 垃圾回收","slug":"JVM-GC","date":"2020-01-20T08:30:08.000Z","updated":"2020-09-28T14:21:41.202Z","comments":true,"path":"blogs/JVM-GC/","link":"","permalink":"https://gigsider.com/blogs/JVM-GC/","excerpt":"","text":"1 GC RootsGC Roots是一些由堆外指向堆内的引用，一般而言，GC Roots 包括（但不限于）如下几种： 栈上的引用 本地方法栈上的引用 方法区上的引用 2 标记-清理 标记阶段：用 GC Root 可达性算法找到所有可达的对象并将之标记 清除阶段：遍历堆中的所有对象，将没有被标记对象清除掉 缺点：容易产生内存碎片 3 标记-整理 标记阶段：用 GC Root 可达性算法找到所有可达的对象并将之标记 整理阶段：将标记存活的对象移向内存的一端 清除阶段：从端边界开始清除 缺点：代价较大，效率较低 4 复制 按内存容量将内存划分为等大小的两块，该段时间内只允许在其中一块内存上进行分配 用 GC Root 可达性算法找到所有可达的对象并将之标记 将标记存活的对象复制到划分的另一块内存 直接清理当前块内存 缺点：可用内存被压缩到了原本的一半，且存活对象增多的话，复制算法的效率会大大降低 5 GC 分代回收将堆区划分成年轻代（Young）和老年代（Old），对于年轻代再划分成 Eden（E），Survive0（S0）和Survive1（S1），大小比约为8:1:1。 我们 new 的对象先是存在 Eden 区，当 Eden 区快满的时候会触发 Young GC， Young GC：采用的是复制法。S0 和 S1 交替工作，在 Eden 区的对象打完标记后，将标记存活的对象复制到 S0 区，然后将 Eden 区和 S1 区中的对象全部清除；等下次 Eden 区快满了之后，再将 S0 区和 Eden 区的对象打标记，将标记存活的对象复制到 S1 区，然后将 Eden 区和 S0 区中的对象全部清除。即： Eden + S1 复制到 S0 Eden + S0 复制到 S1 Eden + S1 复制到 S0 ……如此往复 若一个对象在一次 Young GC 中存活了下来，则该对象的年龄加1，直到对象的年龄到达6，则直接将该对象放入 Old 区中。Old 区中除了存一些年龄大于6的对象，还会存一些大对象（大对象不进行 Young 区的存储，直接存入 Old 区）。Old 区快满的时候会执行 Old GC，Old GC 一般同时会伴随着 Young GC，所以又称为 Full GC，Full GC 会引起 stop the world，即整个 java 程序直接暂停，全力进行垃圾回收，主要采用标记清理或标记整理法。","categories":[{"name":"Java","slug":"Java","permalink":"https://gigsider.com/categories/Java/"},{"name":"JVM","slug":"Java/JVM","permalink":"https://gigsider.com/categories/Java/JVM/"}],"tags":[{"name":"JVM","slug":"JVM","permalink":"https://gigsider.com/tags/JVM/"},{"name":"GC","slug":"GC","permalink":"https://gigsider.com/tags/GC/"}]},{"title":"JVM 内存模型","slug":"JVM","date":"2020-01-18T08:30:08.000Z","updated":"2020-09-28T14:20:43.874Z","comments":true,"path":"blogs/JVM/","link":"","permalink":"https://gigsider.com/blogs/JVM/","excerpt":"JVM 内存主要分为5块：程序计数器、虚拟机栈、本地方法栈、堆、方法区。","text":"JVM 内存主要分为5块：程序计数器、虚拟机栈、本地方法栈、堆、方法区。 1 程序计数器（线程私有）Program Counter Register，程序计数器就是在一些指令的执行过程中，记住下一条 jvm 指令的执行地址。物理上是通过寄存器来实现的。特点 线程私有的 不会存在内存溢出（JVM 规范所决定的） 2 虚拟机栈（线程私有）-Xss 可用来配置栈内存大小，如：-Xss256k，可将栈内存设为256k栈是线程私有的，一个栈有多个栈帧组成 栈：可以理解为线程运行所需要的内存空间 栈帧：可以理解为线程中每个方法运行时所需要的内存（参数、局部变量、返回地址） 每个线程只能有一个活动栈帧，活动栈帧对应该线程正在执行的方法 在一个线程中调用方法1时，会为方法1划分一段栈帧空间栈帧1，并将其压入栈中 方法1中调用了方法2，同理为方法2划分一段栈帧空间栈帧2，并将其压入栈中 方法2中调用方法3同理 方法执行结束后，对应的栈帧出栈 2.1 栈内存溢出java.lang.StackOverflowError 栈帧过多导致栈内存溢出 栈帧过大导致栈内存溢出 3 本地方法栈（线程私有）本地方法指那些不是由 java 代码编写的方法，因为 java 代码是有一定的限制的，它有的时候不能直接和操作系统底层打交道，所以就需要一些用 C/C++ 编写的本地方法，来与操作系统更底层的 API 打交道， java 代码可以通过本地方法来调用到底层的一些功能，这些本地方法运行时所使用的内存就是这个本地方法栈（Native Method Stacks） 4 堆（线程共享）-Xmx 可用来配置堆内存大小，如：-Xmx8m，可将栈内存设为8m通过 new 关键字创建对象都会使用堆内存。 特点 线程共享的，堆中对象都要考虑线程安全问题 有垃圾回收机制 4.1 堆内存溢出java.lang.OutOfMemoryError: Java heap space对象被垃圾回收器回收的条件是这个对象没人在使用它了，但是，如果不断地产生对象且这些对象仍然有被使用，则这些对象不会被当成垃圾，当这些对象达到一定的数量就会导致堆内存的耗尽，及堆内存溢出。 5 方法区（线程共享）Method Area，方法区是所有 java 线程共享的一个区域，它存储了跟类的结构相关的一些信息（运行时常量池、成员变量、方法数据、成员方法和构造方法的代码部分）。方法区在虚拟机启动时被创建，逻辑上是堆的组成部分，但不同 jvm 厂商的实现方式是不一样的。以 Hotspot 为例，在 jdk1.8 以前，方法区的实现叫做永久代，是堆内存的一部分。在 jdk1.8 以后，方法区的实现叫做元空间，元空间用的不再是堆的内存，而是本地内存（操作系统的内存）。方法区如果申请内存时发现不足了，jvm 也会抛出 OutOfMemoryError。","categories":[{"name":"Java","slug":"Java","permalink":"https://gigsider.com/categories/Java/"},{"name":"JVM","slug":"Java/JVM","permalink":"https://gigsider.com/categories/Java/JVM/"}],"tags":[{"name":"JVM","slug":"JVM","permalink":"https://gigsider.com/tags/JVM/"}]},{"title":"Spring IOC/DI","slug":"Spring-IOC-DI","date":"2019-12-24T08:30:08.000Z","updated":"2020-09-28T14:18:36.501Z","comments":true,"path":"blogs/Spring-IOC-DI/","link":"","permalink":"https://gigsider.com/blogs/Spring-IOC-DI/","excerpt":"Spring 是一个基于 IOC 和 AOP 结构，J2EE 系统的框架。IOC 反转控制是 Spring 的基础，Inversion Of Control 简单说就是创建对象由以前的程序员自己 new 构造方法来调用，变成了交由 Spring 容器创建对象；DI 依赖注入 Dependency Inject，简单地说就是拿到的对象的属性，已经被注入好相关值了，直接使用即可。","text":"Spring 是一个基于 IOC 和 AOP 结构，J2EE 系统的框架。IOC 反转控制是 Spring 的基础，Inversion Of Control 简单说就是创建对象由以前的程序员自己 new 构造方法来调用，变成了交由 Spring 容器创建对象；DI 依赖注入 Dependency Inject，简单地说就是拿到的对象的属性，已经被注入好相关值了，直接使用即可。 1 Spring 容器 在 Spring IOC 容器读取 Bean 配置创建 Bean 实例之前，必须对它进行实例化。只有在容器实例化后，才可以从 IOC 容器里获取 Bean 实例并使用。 Spring 提供了两种类型的 IOC 容器实现 BeanFactory：IOC 容器的基本实现。 ApplicationContext：提供了更多的高级特性，是 BeanFactory 的子接口。 BeanFactory 是 Spring 框架的基础设施，面向 Spring 本身；ApplicationContext 面向 Spring 框架的使用者，几乎所有的应用场合都直接使用 ApplicationContext 而非底层的 BeanFactory。 无论使用何种方式，配置文件时是同的。 applicationContext.xml 是 Spring 的核心配置文件，通过关键字 category 即可获得 Category 对象，该对象获取的时候，即被注入了字符串”category 1”到 name 属性中。 123&lt;bean name=&quot;category&quot; class=&quot;com.ff.po.Category&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;category 1&quot; /&gt;&lt;/bean&gt; 2 IOC 和传统方式的区别 传统方式：通过 new 关键字主动创建一个对象 IOC 方式：对象的生命周期由 Spring 容器来管理，直接从 Spring 容器那里去获取一个对象。IOC 控制反转，就像是控制权从程序员的手中交给了 Spring。 2.1 注入对象的方式 类中的 getter setter 方法 在 applicationContext.xml 中使用 ref 来注入另一个对象 1234&lt;bean name=&quot;product&quot; class=&quot;com.ff.po.Product&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;product 1&quot; /&gt; &lt;property name=&quot;category&quot; ref=&quot;category&quot;&gt;&lt;/bean&gt; 3 常用注解 @Autowired，Spring的注解，默认按类型装配。如下，给这个测试类装配 Category 对象 12345678910111213public class Product&#123; ... @Autowired private Category category; public Category getCategory()&#123; return category; &#125; public void setCategory(Category category)&#123; this.category = category; &#125; ...&#125; @Resource，J2EE的注解，默认按名称装配。如下，作用和 @Autowired 一样，但是要加一个赋值(name=”category”)，不加的话默认按字段名查找 12345678910111213public class Product&#123; ... @Resource(name=&quot;category&quot;) private Category category; public Category getCategory()&#123; return category; &#125; public void setCategory(Category category)&#123; this.category = category; &#125; ...&#125; @Component，用于标记一个类上，表示当前类是 Spring 的一个组件，会被实例化到 IOC 容器中，相当于配制文件中的 &lt;bean id=&quot;&quot; class=&quot;&quot; /&gt;，它有三个衍生注解（作用与 @Component 一模一样，只是为了让我们更好区分）： @Controller 用于标记在一个类上，代表这个类是控制层组件 @Service 用于标记在一个类上，代表这个类是业务层组件 @Repository 用于标记在一个类上，代表这个类是数据访问层组件 @RequestMapping，是一个用来处理请求地址映射的注解，可用于类或方法上。用于类，表示类中所有响应请求的方法都是以该地址作为父路径。 @RequestParam，用于将指定的请求参数赋值给方法中的形参。 @PathVariable，可以获取 URL 中的动态参数。 @RequestBody，用于读取 Request 请求的 body 部分数据。 @ResponseBody，用于将 Controller 的方法返回的对象，用流响应给客户端。 @RestController=@Controller+@ResponseBody，用于标记在一个类上。 @Transactional，写在类上用于指定当前类中的方法支持事务，写在方法上表示当前方法支持事务。","categories":[{"name":"Java","slug":"Java","permalink":"https://gigsider.com/categories/Java/"},{"name":"Spring","slug":"Java/Spring","permalink":"https://gigsider.com/categories/Java/Spring/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"https://gigsider.com/tags/Spring/"},{"name":"IOC","slug":"IOC","permalink":"https://gigsider.com/tags/IOC/"}]},{"title":"Java 中的 AOP 理解","slug":"Java-AOP","date":"2019-12-13T08:30:08.000Z","updated":"2020-09-28T14:16:56.440Z","comments":true,"path":"blogs/Java-AOP/","link":"","permalink":"https://gigsider.com/blogs/Java-AOP/","excerpt":"AOP（Aspect Oriented Programming）称为面向切面编程，在程序开发中主要用来解决一些系统层面上的问题，比如日志，事务，权限等待，Struts2的拦截器设计就是基于AOP的思想。","text":"AOP（Aspect Oriented Programming）称为面向切面编程，在程序开发中主要用来解决一些系统层面上的问题，比如日志，事务，权限等待，Struts2的拦截器设计就是基于AOP的思想。 1 JDK 动态代理针对实现接口的类。定义一个Proxy的子类，实现需要代理的类所实现的接口，在重写方法时插入切片。 1.1 实例 自定义接口 1234public interface IDemo &#123; public void say(); public void hello();&#125; 实现自定义接口的类 12345678910111213public class Demo implements IDemo &#123; @Override public void say() &#123; // TODO Auto-generated method stub System.out.println(&quot;Demo say&quot;); &#125; @Override public void hello() &#123; // TODO Auto-generated method stub System.out.println(&quot;Demo method hello&quot;); &#125;｝ 实现了InvocationHandler接口，DynDemo 是一个中间代理类 123456789101112131415161718192021222324252627282930313233343536373839404142434445public class DynDemo implements InvocationHandler &#123; private Object obj;// 此时 obj 是要被代理的对象 private BeforeMethod before; //切片, BeforeMethod 自行编写 public DynDemo() &#123; &#125; // 此时参数obj是要被代理的对象 public DynDemo(Object obj) &#123; this.obj = obj; &#125; // 此时参数obj是要被代理的对象 public DynDemo(Object obj,BeforeMethod before) &#123; this.obj = obj; this.before = before; &#125; //这个方法不是我们显式的去调用 public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; //过滤不需要插入切片的方法，后期可通过读取配置文件来实现过滤 if(method.getName().equals(&quot;hello&quot;)) return method.invoke(obj, args); //真正的调用它原对象 //如果切片不为空，则执行切片 if(before != null) before.say(); Object result= method.invoke(obj, args); // 执行被代理对象的切入点，相当于obj.say(args); return result; &#125; public Object getObj() &#123; return obj; &#125; public void setObj(Object obj) &#123; this.obj = obj; &#125; &#125; main 中测试使用动态代理 123456789101112131415161718192021222324public static void main(String[] args) throws Throwable &#123; Demo target = new Demo();//这里指定被代理类 InvocationHandler ds=new DynDemo(target, new BeforeMethod() &#123; @Override public void say() &#123; System.out.println(&quot;Aspect test say&quot;); &#125; &#125;); Class&lt;?&gt; cls = target.getClass();// 获取target对象类的字节码 //以下是一次性生成代理 IDemo subject = (IDemo)Proxy.newProxyInstance(cls.getClassLoader(),cls.getInterfaces(), ds); System.out.println(&quot;\\n\\n&quot;+&quot;未代理运行结果为：&quot;); target.say(); target.hello(); System.out.println(&quot;\\n\\n&quot;+&quot;代理后运行结果为：&quot;); subject.say(); subject.hello();&#125; Proxy.newProxyInstance()完成的功能： 生成一个类$Proxy（Proxy的子类） $Proxy 类会重写被代理类的接口。 每个方法调用中间代理类的invoke。 运行结果： 自己模拟 Proxy.newProxyInstance 自动生成的类 123456789101112131415161718192021222324252627282930313233343536373839404142//相当于 Proxy 类public class MProxy&#123; protected DynDemo target; public MProxy(DynDemo target) &#123; this.target=target; &#125;&#125;//相当于自动生成的 Proxy 的子类 $Proxypublic class MyProxy extends MProxy implements IDemo&#123; public MyProxy(DynDemo target) &#123; super(target); &#125; @Override public void say() &#123; // TODO Auto-generated method stub try &#123; Method method=target.getObj().getClass().getDeclaredMethod(&quot;say&quot;, null); target.invoke(null, method, null); &#125;catch(Throwable e) &#123; e.printStackTrace(); &#125; &#125; @Override public void hello() &#123; // TODO Auto-generated method stub try &#123; Method method=target.getObj().getClass().getDeclaredMethod(&quot;hello&quot;, null); target.invoke(null, method, null); &#125;catch(Throwable e) &#123; e.printStackTrace(); &#125; &#125;&#125; 2 CGLIB 字节码增强针对未实现接口的类。定义一个子类继承需要代理的类，重写父类的方法并插入切片。 2.1 模拟实现只是模拟实现原理，并非实际使用 自定义 Demo 类 12345678public class Demo &#123; void print() &#123; System.out.println(&quot;Demo print&quot;); &#125;&#125; 定义 Demo 的子类 CGLDemo ，重写父类 Demo 方法以插入切片 12345678910111213141516171819public class CGLDemo extends Demo &#123; BeforeMethod before; public CGLDemo() &#123; &#125; public CGLDemo(BeforeMethod before) &#123; this.before = before; &#125; @Override void print() &#123; if(this.before != null) before.say(); super.print(); &#125; &#125; main 中测试使用字节码增强进行代理 12345678910111213141516public static void main(String[] args) &#123; // TODO Auto-generated method stub Demo demo = new Demo(); CGLDemo cglDemo = new CGLDemo(new BeforeMethod() &#123; @Override public void say() &#123; System.out.println(&quot;Aspect before say&quot;); &#125; &#125;); System.out.println(&quot;\\n未代理运行结果：&quot;); demo.print(); System.out.println(&quot;\\n代理后运行结果：&quot;); cglDemo.print(); &#125; 运行结果：","categories":[{"name":"Java","slug":"Java","permalink":"https://gigsider.com/categories/Java/"}],"tags":[{"name":"AOP","slug":"AOP","permalink":"https://gigsider.com/tags/AOP/"},{"name":"Java","slug":"Java","permalink":"https://gigsider.com/tags/Java/"}]},{"title":"【MySQL]】索引","slug":"MySQL-Index","date":"2019-10-09T08:30:08.000Z","updated":"2020-09-28T14:11:40.081Z","comments":true,"path":"blogs/MySQL-Index/","link":"","permalink":"https://gigsider.com/blogs/MySQL-Index/","excerpt":"MySQL 官方对索引的定义为：索引（index）是帮助 MySQL 高效获取数据的数据结构。索引的本质就是数据结构。","text":"MySQL 官方对索引的定义为：索引（index）是帮助 MySQL 高效获取数据的数据结构。索引的本质就是数据结构。 1 索引的分类 主键索引（Primary Key） 唯一的标识，主键不可重复，只能有一个列作为主键 唯一索引（Unique Key） 避免重复的列出现，唯一索引可以重复，多个列都可以标识为唯一索引 常规索引（Key/Index） 默认的，index、key 关键字来设置 全文索引（FullText） 在特定的数据库引擎，MyISAM 12345678910111213-- =============索引的使用=============-- 1、可以在创建表的时候给字段增加索引-- 2、也可以在表创建完后，再增加索引-- 显示所有的索引信息show index from student;-- 增加一个全文索引 索引名（列名）alter table student add fulltext index `studentName`(studentName);-- explain 分析 sql 执行的状况explain select * from student; -- 非全文索引select * from student where match(studentName) against(&#x27;&#x27;) 2 索引原则 索引不是越多越好 不要对经常变动的数据加索引 小数据量的表不需要加索引 索引一般加在常用来查询的字段上 3 索引的本质 索引是帮助 MySQL 高效获取数据的排好序的数据结构 索引数据结构 二叉树（单边增长的数据放入二叉树会会形成类似链表的结构，查找的性能没有提高） 红黑树（二叉平衡树，当数据量较大，树的深度较大，查询叶子节点时效率较低） Hash（对范围查找的支持非常差） B+Tree 非叶子节点不存储data，只存储索引（冗余），可以放更多的索引 叶子节点包含所有索引字段 叶子节点用指针连接，提高区间访问的性能 3.1 MyISAM 存储引擎索引实现（非聚集） 非聚集索引，索引文件（.MYI）和数据文件（.MYD）是分离的1234select * from table where Col1 = 49;-- 首先判断Col1字段是否为索引字段-- Col1 是索引字段， 去 .MYI 索引文件中快速检索定位，获取到 Col1=49 那一行的磁盘文件地址指针-- 根据获取到的磁盘文件地址指针去 .MYD 文件中快速定位到 Col1=49 的那一行数据 3.2 InnoDB 存储引擎索引实现（聚集） 表数据文件（.ibd 文件）本身就是按 B+Tree 组织的一个索引结构文件 聚集索引，叶子节点包含了完整的数据记录，索引和数据聚集在一个文件（.ibd）中 参考资料:https://space.bilibili.com/95256449","categories":[{"name":"数据库","slug":"数据库","permalink":"https://gigsider.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"数据库/MySQL","permalink":"https://gigsider.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://gigsider.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://gigsider.com/tags/MySQL/"}]},{"title":"【MySQL]】事务","slug":"MySQL-Transaction","date":"2019-10-07T08:30:08.000Z","updated":"2020-09-28T14:11:32.487Z","comments":true,"path":"blogs/MySQL-Transaction/","link":"","permalink":"https://gigsider.com/blogs/MySQL-Transaction/","excerpt":"","text":"1 什么是事务事务(Transaction)为了实现某一目的而进行的一系列操作，要么都成功，要么都失败。 2 ACID原则 原子性（Atomicity） 原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 1234例：A(800) 向 B(200) 转账200A: 800 - 200 &#x3D; 600B: 200 + 200 &#x3D; 400原子性要求步骤 A 和步骤 B 要一起成功或者一起失败，不能只发生其中一个动作。 一致性（Consistency） 事务前后数据的完整性必须保持一致。 1234例：A(800) 向 B(200) 转账200A: 800 - 200 &#x3D; 600B: 200 + 200 &#x3D; 400转账事务开始前，A 和 B 的账户总额为1000，一致性要求转账事务结束后A 和 B 的账户总额不变，仍为1000。 隔离性（Isolation） 事务的隔离性是指多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其它事务的操作所干扰，多个并发事务之间要相互隔离。 1234例：事务1：A 给 B 转账200事务2：C 给 B 转账100隔离性要求事务1和事务2不会相互影响。 持久性（Durablity） 持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。 123456789例：例：A(800) 向 B(200) 转账200执行前： A 800， B 200执行后： A 600， B 400如果在事务提交前，服务器宕机或断电，那么重启数据库后，数据状态应为：A 800， B 200如果在事务提交后，服务器宕机或断电，那么重启数据库后，数据状态应为：A 600， B 400 3 脏读、幻读、不可重复读 脏读 所谓脏读是指一个事务中访问到了另外一个事务未提交的数据，如下图： 会话1 会话2 begin begin select age from table where id=1 commit commit 如果会话 2 更新 age 为 10，但是在 commit 之前，会话 1 希望得到 age，那么会获得的值就是更新前的值。或者如果会话 2 更新了值但是执行了 rollback，而会话 1 拿到的仍是 10。这就是脏读。 幻读 一个事务读取2次，得到的记录条数不一致： 会话1 会话2 begin begin select age from table where id&gt;2 select age from table where id&gt;2 commit 由于在会话 1 之间插入了一个新的值，所以得到的两次数据就不一样了。 不可重复读 一个事务读取同一条记录2次，得到的结果不一致： 一个事务读取同一条记录2次，得到的结果不一致： 会话1 会话2 begin begin select age from table where id=1 select age from table where id=1 commit 由于在读取中间变更了数据，所以会话 1 事务查询期间的得到的结果就不一样了。 4 数据隔离级别 隔离级别 脏读 不可重复读 幻读 读未提交(Read Uncommitted) √ √ √ 读已提交(Read Committed) x √ √ 可重复读(Repeatable Read) x x √ 串行化(Serializable) x x x 读未提交 允许脏读取，但不允许更新丢失。如果一个事务已经开始写数据，则另外一个事务则不允许同时进行写操作，但允许其他事务读此行数据。该隔离级别可以通过“排他写锁”实现。 读已提交 允许不可重复读取，但不允许脏读取。这可以通过“瞬间共享读锁”和“排他写锁”实现。读取数据的事务允许其他事务继续访问该行数据，但是未提交的写事务将会禁止其他事务访问该行。 可重复读 禁止不可重复读取和脏读取，但是有时可能出现幻读数据。这可以通过“共享读锁”和“排他写锁”实现。读取数据的事务将会禁止写事务（但允许读事务），写事务则禁止任何其他事务。 序列化 提供严格的事务隔离。它要求事务序列化执行，事务只能一个接着一个地执行，不能并发执行。仅仅通过“行级锁”是无法实现事务序列化的，必须通过其他机制保证新插入的数据不会被刚执行查询操作的事务访问到。 隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为Read Committed。它能够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。 5 sql 事务操作1234567891011121314151617181920212223242526-- =============事务=============-- MySQL 是默认开启事务并自动提交的set autocommit = 0 /* 关闭 */set autocommit = 1 /* 开启（默认） */-- 手动处理事务set autocommit = 0 -- 关闭自动提交-- 事务开启start transaction -- 标记一个事务的开始，从这个之后的 sql 都在同一个事务内...... -- 事务中的操作-- 提交：持久化（执行成功）commit-- 回滚：回到原来的样子（执行失败）rollback-- 事务结束set autocommit = 1 -- 开启自动提交-- 其它savepoint 保存点名 -- 设置一个事务保存点rollback to savepoint 保存点名 -- 回滚到保存点release savepoint 保存点名 -- 撤销保存点 参考资料:https://space.bilibili.com/95256449","categories":[{"name":"数据库","slug":"数据库","permalink":"https://gigsider.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"数据库/MySQL","permalink":"https://gigsider.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://gigsider.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://gigsider.com/tags/MySQL/"}]},{"title":"【MySQL]】数据查询","slug":"MySQL-Query","date":"2019-10-06T08:30:08.000Z","updated":"2020-09-28T14:10:00.698Z","comments":true,"path":"blogs/MySQL-Query/","link":"","permalink":"https://gigsider.com/blogs/MySQL-Query/","excerpt":"","text":"1 select 语法上下先后顺序很重要 123456789select [all | distinct]&#123;* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]&#125;from table_name [as table_alias] [left | right | inner join table_name2] -- 联表查询 [where ...] -- 指定结果满足的条件 [group by ..] -- 制定结果按照哪几个字段来分组 [having ...] -- 过滤分组的记录必须满足的条件 [order by ...] -- 指定查询记录按一个或多个条件排序 [limit &#123;[offset,]row_count | row_countOFFSET offset&#125;]; -- 指定查询的记录从哪条至哪条 2 where 条件子句作用：检索数据中符合条件的值。搜索条件由一个或多个条件组成，返回结果为布尔值。 2.1 逻辑运算符 运算符 语法 描述 and (&amp;&amp;) a and b (a&amp;&amp;b) 逻辑与 or (||) a or b (a||b) 逻辑或 not (!) not a (!a) 逻辑非 3 模糊查询比较运算符：运算符 | 语法 | 描述—|—|—is null | a is null| 如果操作符为null，结果为真is not null | a is not null | 如果操作符不为null，结果为真between | a between b and c | 若a在b和c之间，结果为真like | a like b | SQL匹配，若a匹配b，结果为真in | a in(a1,a2,a3…) | 若a为(a1,a2…)中的任意一值，结果为真 123456789101112131415161718192021-- ============== like ===============-- like 结合 %（表示任意个字符），_（表示一个字符）-- 查询所有姓刘的同学select stuName from student where stuName like &#x27;刘%&#x27;;--查询名字为两个字姓刘的同学select stuName from student where stuName like &#x27;刘_&#x27;;--查询名字中有 佳 字的同学select stuName from student where stuName like &#x27;%佳%&#x27;;-- ============== in ===============-- 查询学号为1,3,5,7,9的学生select stuId, stuName from student where stuId in (1,3,5,7,9); -- ============== null,not null ===============-- 查询地址为空的学生select stuId, stuName from student where address=&#x27;&#x27; or address is null;-- 查询出生日期不为空的学生select stuId, stuName from student where birth is not null; 4 联表查询4.1 七种 join 理论（图源百度） 1234567891011121314151617181920212223242526/** student(stuId,stuName)* exam(stuId,courseId,score)* 查询所有参加了考试的学生*/-- join on 连接查询-- where 等值查询-- inner joinselect s.stuId, stuName, courseId, scorefrom student as sinner join exam as eon s.stuId = e.stuId;-- right joinselect s.stuId, stuName, courseId, scorefrom student as sright join exam as eon s.stuId = e.stuId;-- left joinselect s.stuId, stuName, courseId, scorefrom student as sleft join exam as eon s.stuId = e.stuId; 操作 描述 inner join 如果表中至少有一个匹配，就返回值 left join 即使右表中没有匹配，也会从左表中返回所有的值 right join 即使左表中没有匹配，也会从右表中返回所有的值 12345678910111213/** student(stuId,stuName)* exam(stuId,courseId,score)* course(courseId,courseName)* 查询所有参加了考试的学生的学号、姓名、课程名、分数信息*/select s.stuId, stuName, courseName, scorefrom student sright join exam eon s.stuId = e.stuIdinner join course con e.courseId = c.courseId; 5 常用聚合函数 函数 描述 COUNT() 计数 SUM() 求和 AVG() 平均值 MAX() 最大值 MIN() 最小值 … … 1234-- 都能够统计表中的数据select count(`stuId`) from student; -- count(字段)，会忽略所有的 null 值select count(*) from student; -- count(*)，包含了所有列，不会忽略 null 值，本质计算行数select count(1) from student; -- count(1)，忽略了所有列，用1代表代码行，不会忽略 null 值 参考资料:https://space.bilibili.com/95256449","categories":[{"name":"数据库","slug":"数据库","permalink":"https://gigsider.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"数据库/MySQL","permalink":"https://gigsider.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://gigsider.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://gigsider.com/tags/MySQL/"}]},{"title":"【MySQL]】删除语句 Delete 和 Truncate","slug":"MySQL-Delete-Truncate","date":"2019-10-05T08:30:08.000Z","updated":"2020-09-28T14:09:21.389Z","comments":true,"path":"blogs/MySQL-Delete-Truncate/","link":"","permalink":"https://gigsider.com/blogs/MySQL-Delete-Truncate/","excerpt":"","text":"1 Delete语法：delete from 表名 [where 条件] 12345-- 删除表中的全部数据delete from `student`;-- 删除表中的指定数据delete from `student` where stuId = 1; 2 Truncate作用：完全清空一个数据库表，表的结构和索引约束不会变 12-- 清空 student 表truncate table `student`; 3 Delete 和 Truncate 的区别 相同点：都能删除数据，都不会删除表结构。 不同点： Truncate 重新设置自增列，计数器会清零 Truncate 不会影响事务123456789101112-- 测试 delete 和 truncate 的区别create table `test`( `id` int(4) not null auto_increment, `coll` varchar(20) not null, primary key(`id`))engine=innodb default charset=utf8insert into `test`(`coll`) values (&#x27;1&#x27;),(&#x27;2&#x27;),(&#x27;3&#x27;)delete from `test` -- 不会影响自增计数器truncate table `test` -- 自增计数器归零 delete 删除重启数据库的现象： InnoDB 自增列会从1开始（存储在内存中的，断电即失） MyISAM 继续从上一个自增量开始（存在文件中的，不会丢失） 参考资料:https://space.bilibili.com/95256449","categories":[{"name":"数据库","slug":"数据库","permalink":"https://gigsider.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"数据库/MySQL","permalink":"https://gigsider.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://gigsider.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://gigsider.com/tags/MySQL/"}]},{"title":"初识 MySQL 数据库","slug":"Database-MySQL","date":"2019-10-04T08:30:08.000Z","updated":"2020-09-28T14:08:23.974Z","comments":true,"path":"blogs/Database-MySQL/","link":"","permalink":"https://gigsider.com/blogs/Database-MySQL/","excerpt":"","text":"1 初始MySQLJavaEE：企业级JavaWeb开发 前端：页面展示 后端：连接数据库，连接前端 数据库：存储管理数据 1.1 什么是数据库数据库（DB，DataBase） 概念：数据仓库，软件，安装在操作系统之上，可以存储大量的数据。 作用：存储数据、管理数据。 1.2 数据库分类关系型数据库（SQL）： MySQL，Oracle，SQLServer，Sqlite… 通过表和表之间，行和列之间的关系进行数据的存储。 非关系型数据库（NoSQL）： Redis，MongoDB … 对象存储，通过对象自身的属性来决定。 DBMS（数据库管理系统） 数据库的管理软件，科学有效的管理我们的数据，维护和获取数据。 1.3 MySQL简介MySQL是一个关系型数据库管理系统。是最好的RDBMS开源应用软件之一。体积小、速度快。适用于中小型网站，或大型网站（集群）。 2 MySQL 数据库2.1 数据库的列类型 数值 tinyint 十分小的数据 1个字节 smallint 较小的数据 2个字节 mediumint 中等大小的数据 3个字节 int 标准的整数 4个字节（常用的） bigint 较大的数据 8个字节 float 浮点数 4个字节 double 浮点数 8个字节 decimal 字符串形式的浮点数 金融计算的时候常用（float，double有精度问题） 字符串 char 固定大小的字符串 0-255 varchar 可变字符串 0-65535（常用的变量） tinytext 微型文本 2^8-1 text 文本串 2^16-1（保存大文本） 时间日期 date YYYY-MM-DD 日期 time HH:mm:ss 时间格式 datetime YYYY-MM-DD HH:mm:ss 最常用的时间格式 timestamp 时间戳 1970.1.1到现在的毫秒数，较为常用 year 年份表示 null 没有值，未知 2.2 数据库的字段属性==unsigned==： 无符号的整数 声明了该列不能为负数 ==zerofill==： 0填充的 不足的位数，使用0来填充，例：int(3), 1-&gt;001 ==autoincreament==： 通常理解为自增，自动在上一条记录的基础上加1 通常用来设计唯一的主键，必须是整数类型 可以自定义设计自增的起始值和步长 ==not null==： 非空 假设设置为 not null ，如果不给它赋值，就会报错 如果不填值，默认就是 null ==default==： 设置默认的值 2.3 数据表的类型 MYISAM INNODB 事务支持 不支持 支持 数据行锁定 不支持 支持 外键约束 不支持 支持 全文索引 支持 不支持 表空间的大小 较小 较大，约为 MYISAM 的2倍 常规使用操作： MYISAM 节约空间，速度较快 INNODB 安全性高，事务的处理，多表多用户操作 在物理空间存在的位置： 所有的数据库文件都存在 data 目录下，一个文件夹久对应一个数据库，本质还是文件的存储。 MySQL 引擎在物理文件上的区别 InnoDB 在数据表中只有 *.frm 文件，以及上级目录下的 ibdata1 文件。 MyISAM 对应的文件 *.frm 表结构的定义文件 *.MYD 数据文件（data） *.MYI 索引文件（index） 设置数据表的字符集编码 1CHARSET&#x3D;utf8 不设置的话，会是 MySQL 默认的字符集编码Latin1（不支持中文） 参考资料:https://space.bilibili.com/95256449","categories":[{"name":"数据库","slug":"数据库","permalink":"https://gigsider.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"数据库/MySQL","permalink":"https://gigsider.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://gigsider.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://gigsider.com/tags/MySQL/"}]},{"title":"MySQL 5.7 免安装版","slug":"MySQL-5.7","date":"2019-10-02T08:30:08.000Z","updated":"2020-09-28T14:07:31.545Z","comments":true,"path":"blogs/MySQL-5.7/","link":"","permalink":"https://gigsider.com/blogs/MySQL-5.7/","excerpt":"","text":"1 软件下载下载地址：https://downloads.mysql.com/archives/community/ 下载mysql 5.7… ZIP免安装版本 2 操作步骤 下载后得到zip压缩包 解压到自己想要安装到的目录 添加环境变量 右击此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量 选择 PATH ，在其后添加你的 MySQL 文件夹下 bin 文件夹的路径 在 MySQL 文件夹下新建 my.ini 文件 编辑 my.ini 文件（注意替换路径位置）123456789[mysqld]# MySQL 文件夹路径basedir&#x3D;..:\\..\\mysql..\\# MySQL 文件夹下 data 文件夹路径（data 文件夹没有不要自己新建，之后会自动生成）datadir&#x3D;..:\\..\\mysql..\\data\\# MySQL 运行端口，默认为3306port&#x3D;3306# 跳过密码验证，修改好密码后需注释掉skip-grant-tables 以管理员身份启动命令提示符（CMD），cd 进入 MySQL 下的 bin 目录， 然后输入 mysqld -install （安装mysql） 输入 mysqld --initialize-insecure --user=mysql 初始化数据文件（此步骤会自动生成上述 data 目录） 输入 net start mysql 启动 mysql 通过命令行进入 mysql ，mysql -u root -p （-p 后面不能加空格），出现“Enter password:”直接按回车 进入 mysql 页面后输入 update mysql.user set authentication_string=password(&#39;123456&#39;) where user=&#39;root&#39; and Host=&#39;localhost&#39;; 将 root 用户密码更改为123456 在 mysql 页面中输入 flush privileges 刷新权限 修改 my.ini 文件注释掉最后一句skip-grant-tables 在 mysql 页面下输入exit退出 mysql 页面，在命令行中输入12net stop mysqlnet start mysql 重启 mysql 即可正常使用。 资料来源:https://space.bilibili.com/95256449","categories":[{"name":"数据库","slug":"数据库","permalink":"https://gigsider.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"数据库/MySQL","permalink":"https://gigsider.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://gigsider.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://gigsider.com/tags/MySQL/"},{"name":"安装","slug":"安装","permalink":"https://gigsider.com/tags/%E5%AE%89%E8%A3%85/"}]},{"title":"TCP 协议","slug":"TCP","date":"2019-08-27T08:30:08.000Z","updated":"2020-09-28T14:13:37.395Z","comments":true,"path":"blogs/TCP/","link":"","permalink":"https://gigsider.com/blogs/TCP/","excerpt":"TCP（Transmission Control Protocol）：面向连接的，可靠的，基于字节流的传输层通信协议","text":"TCP（Transmission Control Protocol）：面向连接的，可靠的，基于字节流的传输层通信协议 1 特点 基于连接的：数据传输之前需要建立连接 全双工的：双向传输 字节流：不限制数据大小，打包成报文段，保证有序接收，重复报文自动丢弃 流量缓冲：解决双方处理能力的不匹配 可靠的传输服务：保证可达，丢包时通过重发机制实现可靠性 拥塞控制：防止网络出现恶性拥塞 2 UDP 和 TCP 的对比 UDP（User Datagram Protocol） TCP（Transmission Control Protocol） 无连接 面向连接 支持一对一，一对多，多对一和多对多交互通信 每一条 TCP 连接只能有两个端点，只能是一对一通信 对应用层交付的报文直接打包 面向字节流 尽最大努力交付，也就是不可靠；不使用流量控制和拥塞控制 可靠传输，使用流量控制和拥塞控制 首部开销小，仅8字节 首部最小20字节，最大60字节 TCP协议适用于对效率要求相对低，但对准确性要求相对高的场景，如文件传输、邮件接收等；而UDP协议适用于对效率要求相对高，对准确性要求相对低的场景，如在线直播、在线会议等。 3 TCP 报文 4 三次握手 TCP 连接：四元组（源地址，源端口，目的地址，目的端口） 确立连接：TCP 三次握手 同步通信双方初识序列号（ISN，initial sequence number） 协商 TCP 通信参数（MSS，窗口信息，指定校验和算法） 5 四次挥手 A：发送 FIN 数据报，代表 A 不再发送数据B：收到请求，发送 ACK 应答，避免了 A 重新发送 FIN 数据报（应答机制）B：处理完数据之后关闭连接，即发送 FIN 请求A：收到请求后发送 ACK 应答，B 服务可以释放连接A：等待 2MSL 后释放连接 防止报文丢失，导致 B 重复发送 FIN 防止滞留在网络中的报文对新建立的连接造成数据干扰 参考资料：https://space.bilibili.com/472427006","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://gigsider.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://gigsider.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"协议","slug":"协议","permalink":"https://gigsider.com/tags/%E5%8D%8F%E8%AE%AE/"},{"name":"TCP","slug":"TCP","permalink":"https://gigsider.com/tags/TCP/"}]},{"title":"TCP/IP 模型","slug":"TCP-IP","date":"2019-08-23T08:30:08.000Z","updated":"2020-09-28T14:00:12.079Z","comments":true,"path":"blogs/TCP-IP/","link":"","permalink":"https://gigsider.com/blogs/TCP-IP/","excerpt":"","text":"1 协议协议是一种约定，计算机之间想要传递信息需要双方约定好数据的格式。网络协即是一个共同的标准，大家都来遵守，两台计算机的通信需要协议和标准的数据格式才能进行。 2 协议分层协议分层的最大好处就是便于封装。 2.1 OSI 七层模型OSI（Open System Interconnection Reference Model）：开放系统互联参考模型 物理层：界定连接器和网线之间的规格 数据链路层：互联设备之间传送和识别数据帧 网络层：地址管理和路由选择 传输层：管理两个节点之间的数据传递。负责可靠传输 会话层：通信管理，负责建立和单开通信连接，管理传输层 以下分层 表示层：设备固定的数据格式和网络标准数据格式之间的转化 应用层：针对你特定应用的协议 OSI 七层模型最大的优点就是将服务、接口和协议三个概念明确的区分起来，缺点则是复杂且不实用；经常使用的是 TCP/IP 五（四）层模型。 2.2 TCP/IP 五（四）层模型每一层都呼叫它的下一层提供的网络来完成自己的需求。（如果是四层模型数据链路层和物理层在一层称为网际接口层） 物理层：负责光电信号传递方式。集线器工作在物理层。以太网协议。 数据链路层：负责设备之间的数据帧的传输和识别。交换机工作在数据链路层。例如网卡设备的驱动，帧同步，冲突检测，数据差错校验等工作。 网络层：负责地址管理和路由选择。路由器工作在网络层。 传输层：负责两台主机之间的数据传输。 应用层：负责应用程序之间的沟通。网络编程主要针对的就是应用层。 传输层和网络层的封装在操作系统完成。应用层的封装在应用程序中完成。数据链路层和物理层的封装在设备驱动程序与网络接口中完成。 对于一台主机，它的操作系统内核实现了传输层到物理层的内容。 对于一台路由器，它实现了从网络层到物理层。 对于一台交换机，它实现了由数据链路层到物理层。 对于集线器，他只实现了物理层。 3 一个 HTTP 请求的分层解析流程 浏览器中输入域名：gigsiderfun.com 客户端查看缓存和本地 host 文件中是否存在此域名对应的 ip 地址，有的话则转到步骤6，否则继续 客户端发起一个 DNS 请求 应用层构造一个 DNS 请求报文，往下交给传输层 传输层在 DNS 报文的基础上加上 UDP 的请求头，往下交给网络层 网络层在 UDP 的请求报文基础上加上 IP 的请求头，往下交给数据链路层 数据链路层会将自己的 MAC 地址以及对应的请求报文应该要交给下一个机器的 MAC 地址加上去，往下交给物理层 物理层通过物理介质将请求传出去 DNS 服务器接收到请求查找到 gigsiderfun.com 对应的 ip 地址，发起一个 DNS 响应报文原路返回 客户端收到 DNS 响应报文进行层层解析，得到 gigsiderfun.com 对应的 ip 地址 客户端发起一个 HTTP 请求 应用层构造一个 HTTP 请求报文，往下交给传输层 传输层在 HTTP 报文的基础上加上 TCP 的请求头，往下交给网络层 网络层在 TCP 的请求报文基础上加上 IP 的请求头，往下交给数据链路层 数据链路层会将自己的 MAC 地址以及对应的请求报文应该要交给下一个机器的 MAC 地址加上去，往下交给物理层 物理层通过物理介质将请求传出去 对应服务器接收到 HTTP 请求对 HTTP 请求报文进行层层解析 物理层接收到 HTTP 请求报文向上交给数据链路层 数据链路层通过 MAC 地址检查该报文是不是给自己的，是的话就进行解析并向上交给网络层 网络层通过 IP 地址检查是不是给自己的，是的话就进行解析并向上交给传输层 传输层解析 TCP 的端口并将请求报文交给应用程序 应用程序拿到了对应的 HTTP 请求报文并进行解析 服务器解析完成后构造并发起一个 HTTP 响应报文 客户端接收到 HTTP 响应报文进行层层解析获取到网页资源并展示在浏览器上 参考资料：https://blog.csdn.net/ffsiwei/article/details/82121010 https://space.bilibili.com/472427006","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://gigsider.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://gigsider.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"TCP","slug":"TCP","permalink":"https://gigsider.com/tags/TCP/"},{"name":"IP","slug":"IP","permalink":"https://gigsider.com/tags/IP/"}]},{"title":"HTTPS 协议","slug":"HTTPS","date":"2019-08-22T08:30:08.000Z","updated":"2020-09-28T13:58:16.978Z","comments":true,"path":"blogs/HTTPS/","link":"","permalink":"https://gigsider.com/blogs/HTTPS/","excerpt":"","text":"1 HTTPS由于 HTTP 天生“明文”的特点，整个传输过程完全透明，任何人都能在链路中截获、修改或者伪造请求/响应报文，数据不具有可信性。因此就诞生了为安全而生的 HTTPS 协议。使用 HTTPS 时，所有的 HTTP 请求和响应在发送到网络之前，都要进行加密。 2 摘要算法摘要算法能够把任意长度的数据“压缩”成固定长度、而且独一无二的“摘要”字符串，就好像是给这段数据生成了一个数字“指纹”。任意微小的数据差异，都可以生成完全不同的摘要。所以可以通过把明文信息的摘要和明文一起加密进行传输，数据传输到对方后再进行解密，重新对数据进行摘要，再比对就能发现数据有没有被篡改。这样就保证了数据的完整性。目前常用的摘要算法：MD5、SHA-1、SHA-256 3 加密算法3.1 对称密钥加密算法编、解码使用相同密钥的算法，如AES、RC4、ChaCha20。使用异或(xor)实现的对称加密： 3.2 非对称密钥加密算法它有两个密钥，一个叫“公钥”，一个叫“私钥”。两个密钥是不同的，公钥可以公开给任何人使用，而私钥必须严格保密。非对称加密可以解决“密钥交换”的问题。网站秘密保管私钥，在网上任意发布公钥，你想要登录网站只要用公钥加密就行了，密文只能由私钥持有者才能解密。而黑客因为没有私钥，所以就无法破解密文。非对称秘钥加密系统通常需要大量的数学运算，效率较低。常用非对称密钥加密算法有 DH、DSA、RSA、ECC。TLS 里使用的混合加密方式，即把对称加密和非对称加密结合起来，两者互相取长补短，既能高效的加密解密，又能安全的密钥交换。大致流程如下： 通信开始的时候使用非对称加密算法如 RSA 先解决密钥交换的问题。 用随机数产生对称算法使用的“会话密钥”，再用公钥加密。会话密钥很短，所以即便使用非对称加密算法也可以很快完成加解密。 对方拿到密文后使用私钥解密，取出会话密钥，完成对称密钥的安全交换，后续就使用对称算法完成数据交换。 参考资料：https://space.bilibili.com/472427006","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://gigsider.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://gigsider.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"协议","slug":"协议","permalink":"https://gigsider.com/tags/%E5%8D%8F%E8%AE%AE/"},{"name":"HTTPS","slug":"HTTPS","permalink":"https://gigsider.com/tags/HTTPS/"}]},{"title":"HTTP 协议","slug":"HTTP","date":"2019-08-17T08:30:08.000Z","updated":"2020-09-28T13:58:28.785Z","comments":true,"path":"blogs/HTTP/","link":"","permalink":"https://gigsider.com/blogs/HTTP/","excerpt":"HTTP（HyperText Transfer Protocol），超文本传输协议HTTP 协议是一种无状态的、以请求/应答方式运行的协议，它使用可扩展的语义和自描述消息格式，与基于网络的超文本信息系统（HTML）灵活的互动。","text":"HTTP（HyperText Transfer Protocol），超文本传输协议HTTP 协议是一种无状态的、以请求/应答方式运行的协议，它使用可扩展的语义和自描述消息格式，与基于网络的超文本信息系统（HTML）灵活的互动。 1 HTTP 报文格式HTTP 协议的请求报文和响应报文的结构基本相同，由三大部分组成： 起始行（start line）：描述请求或响应的基本信息 头部字段集合（header）：使用 key-value 形式更详细的说明报文 消息正文（entity）：实际传输的数据，它不一定是文本，可以是图片、视频等二进制数据 2 请求行报文格式 请求方法：如 GET/HEAD/PUT/POST，表示对资源的操作 请求目标：通常是一个 URI，标记了请求方法要操作的资源 版本号：表示报文使用的 HTTP 协议版本 3 响应行报文格式 版本号：表示报文使用的 HTTP 协议版本 状态码：一个三位数，用代码的形式表示处理的结果，比如200是成功，500是服务器错误 原因：作为数字状态码补充，是更详细的解释文字，帮助人理解原因 4 HTTP 头字段头部字段是 key-value 的形式， key 和 value 之间用冒号”:”分隔，最后用 CRLF 换行表示字段结束。比如前后端分离时常遇到的要与后端协商传输数据的类型”Content-type:application/json”，这里 key 就是 Content-type，value 就是 application/json。HTTP 头字段非常灵活，不仅可以使用标准里的 Host、Connection 等已有头，也可以任意添加自定义头，这就给 HTTP 协议带来了无限的扩展可能。 4.1 头字段注意事项 字段名不区分大小写，字段名里不允许出现空格，可以使用连字符”-“，但不能使用下划线”_”（有的服务器不会解析带下划线的头字段）。字段名后面必须紧跟着”:”，不能有空格，而”:”后的字段值可以有多个空格 字段的顺序是没有意义的，可以任意排列不影响语义 字段原则上不能重复，除非这个字段本身的语义允许，例如 Set-Cookie 4.2 常用头字段HTTP 协议中有非常多的头字段，但基本上可以分为四大类： 请求字段：请求中的头字段；如 Host，Referer。 相应字段：响应中的头字段；如：Server。 通用字段：在请求和响应中都可以出现；如 Content-type，Connection。 5 HTTP 请求的完整过程当用户在浏览器中输入网址按回车后，网络协议做了以下工作： 首先干活的是浏览器应用程序，它要解析 URL 中的域名 根据域名获取对应的 ip 地址，首先从浏览器缓存中查看，如果没有，则从本机域名解析文件 hosts 中查看，还没有则从 LDNS（LocalDNSServer）、RootServer 域名服务器、国际顶级域名服务商的 DNS 服务器中查找 拿到 ip 地址后，浏览器就可以发起与服务器的三次握手 握手建立后，就开始组装 http 请求报文，发送报文 服务器收到请求报文后开始解析请求报文，生成响应数据，组装成响应报文，发送响应报文 浏览器收到响应后，开始渲染页面 参考资料：https://space.bilibili.com/472427006","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://gigsider.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://gigsider.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"协议","slug":"协议","permalink":"https://gigsider.com/tags/%E5%8D%8F%E8%AE%AE/"},{"name":"HTTP","slug":"HTTP","permalink":"https://gigsider.com/tags/HTTP/"}]},{"title":"MarkDown 基础语法","slug":"MarkDown-First-Met","date":"2018-08-22T01:56:18.000Z","updated":"2020-09-28T14:27:40.686Z","comments":true,"path":"blogs/MarkDown-First-Met/","link":"","permalink":"https://gigsider.com/blogs/MarkDown-First-Met/","excerpt":"MarkDown 是一种轻量级标记语言。Markdown 的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。","text":"MarkDown 是一种轻量级标记语言。Markdown 的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。 1 标题 12345# 一级标题名## 二级标题名### 三级标题名......###### 六级标题名 标题最多支持六级标题 2 文字 有些文字格式 MarkDown 的原生语法并不包括， 解决方案： 使用HTML的标签 使用HTML标签+CSS样式实现自己想要的字体格式 2.1 删除线使用”~~”: 1~~加上删除线的文字~~ 效果：加上删除线的文字 2.2 斜体使用”*”: 1*斜体的文字* 效果：斜体的文字 2.3 加粗使用”**”: 1**加粗的文字** 效果：加粗的文字 2.4 表格使用”|”来分隔不同的单元格，使用”-“来分隔表头和其他行，为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用”|”来标记单元格边界，在表头下方的分隔线标记中加入”:”，即可标记下方单元格内容的对齐方式： 12345| Name | Age | Sex || :--------- | :-------: | --------: || Ming | 19 | Male || Hong | 20 | Female || Gang | 18 | Male | 效果： Name Age Sex Ming 19 Male Hong 20 Female Gang 18 Male 2.5 下划线使用 HTML &lt;u&gt; 标签: 1&lt;u&gt;HTML u 标签&lt;&#x2F;u&gt; 使用 HTML 标签 + CSS 样式: 1&lt;span style&#x3D;&quot;border-bottom:2px dashed yellow;&quot;&gt;HTML 标签 + CSS 样式&lt;&#x2F;span&gt; u标签效果：HTML u 标签 HTML + CSS 效果: HTML 标签 + CSS 样式 2.6 上标、下标上标使用 HTML &lt;sup&gt; 标签: 1SUPER&lt;sup&gt;我是上标&lt;&#x2F;sup&gt; 下标使用 HTML &lt;sub&gt; 标签: 1SUB&lt;sub&gt;我是下标&lt;&#x2F;sub&gt; 上标效果：SUPER我是上标 下标效果：SUB我是下标 3 引用 使用”&gt;”: 1234&gt;朝辞白帝彩云间&gt;&gt;千里江陵一日还&gt;&gt;&gt;两岸猿声啼不住&gt;&gt;&gt;&gt;轻舟已过万重山 效果： 朝辞白帝彩云间 千里江陵一日还 两岸猿声啼不住 轻舟已过万重山 4 列表 4.1 有序列表使用”数字. “: 1231. 注意&quot;.&quot;后要有空格2. 列表3. 有序列表 效果： 注意”.”后要有空格 列表 有序列表 4.2 无序列表使用”*”或”+”或”-“: 123* 注意符号后要有空格+ 列表- 无序列表 效果： 注意符号后要有空格 列表 无序列表 5 代码 代码中的文本都会显示为原始内容。 5.1 代码块使用”```语言名称”: 123456​&#96;&#96;&#96;c++int main()&#123; cout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl; return 0;&#125; 效果： 12345int main()&#123; cout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl; return 0;&#125; 5.2 行内代码使用”``“: 1&#96;System.out.println(&quot;Hello world!&quot;)&#96; 效果：System.out.println(&quot;Hello world!&quot;) 6 分割线 使用”—“或”___”或”***”（符号数大于三个即可）: 123******----------_____ 效果： 7 跳转 使用”[现实的文本](跳转的链接)“: 1[我的博客](https:&#x2F;&#x2F;www.gigsider-fun.com) 使用”&lt;跳转的链接&gt;”: 1&lt;https:&#x2F;&#x2F;www.gigsider-fun.com&gt; []()效果：我的博客 &lt;&gt;效果：https://www.gigsider-fun.com 8 图片 使用”![图片的描述](图片的地址)“: 1![测试图片](MarkDown-First-Met&#x2F;test.png) 效果： 资料来源：https://space.bilibili.com/32157804","categories":[{"name":"MarkDown","slug":"MarkDown","permalink":"https://gigsider.com/categories/MarkDown/"}],"tags":[{"name":"MarkDown","slug":"MarkDown","permalink":"https://gigsider.com/tags/MarkDown/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://gigsider.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]}],"categories":[{"name":"Java","slug":"Java","permalink":"https://gigsider.com/categories/Java/"},{"name":"JVM","slug":"Java/JVM","permalink":"https://gigsider.com/categories/Java/JVM/"},{"name":"Spring","slug":"Java/Spring","permalink":"https://gigsider.com/categories/Java/Spring/"},{"name":"数据库","slug":"数据库","permalink":"https://gigsider.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"数据库/MySQL","permalink":"https://gigsider.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"},{"name":"计算机网络","slug":"计算机网络","permalink":"https://gigsider.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"MarkDown","slug":"MarkDown","permalink":"https://gigsider.com/categories/MarkDown/"}],"tags":[{"name":"JVM","slug":"JVM","permalink":"https://gigsider.com/tags/JVM/"},{"name":"GC","slug":"GC","permalink":"https://gigsider.com/tags/GC/"},{"name":"Spring","slug":"Spring","permalink":"https://gigsider.com/tags/Spring/"},{"name":"IOC","slug":"IOC","permalink":"https://gigsider.com/tags/IOC/"},{"name":"AOP","slug":"AOP","permalink":"https://gigsider.com/tags/AOP/"},{"name":"Java","slug":"Java","permalink":"https://gigsider.com/tags/Java/"},{"name":"数据库","slug":"数据库","permalink":"https://gigsider.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://gigsider.com/tags/MySQL/"},{"name":"安装","slug":"安装","permalink":"https://gigsider.com/tags/%E5%AE%89%E8%A3%85/"},{"name":"计算机网络","slug":"计算机网络","permalink":"https://gigsider.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"协议","slug":"协议","permalink":"https://gigsider.com/tags/%E5%8D%8F%E8%AE%AE/"},{"name":"TCP","slug":"TCP","permalink":"https://gigsider.com/tags/TCP/"},{"name":"IP","slug":"IP","permalink":"https://gigsider.com/tags/IP/"},{"name":"HTTPS","slug":"HTTPS","permalink":"https://gigsider.com/tags/HTTPS/"},{"name":"HTTP","slug":"HTTP","permalink":"https://gigsider.com/tags/HTTP/"},{"name":"MarkDown","slug":"MarkDown","permalink":"https://gigsider.com/tags/MarkDown/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://gigsider.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]}