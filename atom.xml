<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>柴德Fun</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gigsider.com/"/>
  <updated>2020-07-31T06:02:45.757Z</updated>
  <id>https://gigsider.com/</id>
  
  <author>
    <name>柴德Fun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MarkDown基础语法</title>
    <link href="https://gigsider.com/blogs/MarkDown-First-Met/"/>
    <id>https://gigsider.com/blogs/MarkDown-First-Met/</id>
    <published>2020-07-31T01:56:18.000Z</published>
    <updated>2020-07-31T06:02:45.757Z</updated>
    
    <content type="html"><![CDATA[<p>MarkDown 是一种轻量级标记语言。Markdown 的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。</p><a id="more"></a><hr><h1 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a>1、标题</h1><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题名</span><br><span class="line">## 二级标题名</span><br><span class="line">### 三级标题名</span><br><span class="line">......</span><br><span class="line">###### 六级标题名</span><br></pre></td></tr></table></figure><p>标题最多支持六级标题</p><h1 id="2、文字"><a href="#2、文字" class="headerlink" title="2、文字"></a>2、文字</h1><hr><p>有些文字格式 MarkDown 的原生语法并不包括，</p><p>解决方案：</p><ul><li><a href="#2-5-%E4%B8%8B%E5%88%92%E7%BA%BF">使用HTML的标签</a></li><li><a href="#2-5-%E4%B8%8B%E5%88%92%E7%BA%BF">使用HTML标签+CSS样式实现自己想要的字体格式</a></li></ul><h2 id="2-1-删除线"><a href="#2-1-删除线" class="headerlink" title="2.1 删除线"></a>2.1 删除线</h2><p>使用”~~”:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~加上删除线的文字~~</span><br></pre></td></tr></table></figure><p>效果：<del>加上删除线的文字</del></p><h2 id="2-2-斜体"><a href="#2-2-斜体" class="headerlink" title="2.2 斜体"></a>2.2 斜体</h2><p>使用”*”:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*斜体的文字*</span><br></pre></td></tr></table></figure><p>效果：<em>斜体的文字</em></p><h2 id="2-3-加粗"><a href="#2-3-加粗" class="headerlink" title="2.3 加粗"></a>2.3 加粗</h2><p>使用”**”:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**加粗的文字**</span><br></pre></td></tr></table></figure><p>效果：<strong>加粗的文字</strong></p><h2 id="2-4-表格"><a href="#2-4-表格" class="headerlink" title="2.4 表格"></a>2.4 表格</h2><p>使用”|”来分隔不同的单元格，使用”-“来分隔表头和其他行，为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用”|”来标记单元格边界，在表头下方的分隔线标记中加入”:”，即可标记下方单元格内容的对齐方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|    Name    |    Age    |    Sex    |</span><br><span class="line">| :--------- | :-------: | --------: |</span><br><span class="line">| Ming       | 19        | Male      |</span><br><span class="line">| Hong       | 20        | Female    |</span><br><span class="line">| Gang       | 18        | Male      |</span><br></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th align="left">Name</th><th align="center">Age</th><th align="right">Sex</th></tr></thead><tbody><tr><td align="left">Ming</td><td align="center">19</td><td align="right">Male</td></tr><tr><td align="left">Hong</td><td align="center">20</td><td align="right">Female</td></tr><tr><td align="left">Gang</td><td align="center">18</td><td align="right">Male</td></tr></tbody></table><h2 id="2-5-下划线"><a href="#2-5-下划线" class="headerlink" title="2.5 下划线"></a>2.5 下划线</h2><p>使用 HTML <code>&lt;u&gt;</code> 标签:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;HTML u 标签&lt;&#x2F;u&gt;</span><br></pre></td></tr></table></figure><p>使用 HTML 标签 + CSS 样式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span style&#x3D;&quot;border-bottom:2px dashed yellow;&quot;&gt;HTML 标签 + CSS 样式&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><p>u标签效果：<u>HTML u 标签</u></p><p>HTML + CSS 效果: <span style="border-bottom:2px dashed yellow;">HTML 标签 + CSS 样式</span></p><h2 id="2-6-上标、下标"><a href="#2-6-上标、下标" class="headerlink" title="2.6 上标、下标"></a>2.6 上标、下标</h2><p>上标使用 HTML <code>&lt;sup&gt;</code> 标签:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUPER&lt;sup&gt;我是上标&lt;&#x2F;sup&gt;</span><br></pre></td></tr></table></figure><p>下标使用 HTML <code>&lt;sub&gt;</code> 标签:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUB&lt;sub&gt;我是下标&lt;&#x2F;sub&gt;</span><br></pre></td></tr></table></figure><p>上标效果：SUPER<sup>我是上标</sup></p><p>下标效果：SUB<sub>我是下标</sub></p><h1 id="3、引用"><a href="#3、引用" class="headerlink" title="3、引用"></a>3、引用</h1><hr><p>使用”&gt;”:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;朝辞白帝彩云间</span><br><span class="line">&gt;&gt;千里江陵一日还</span><br><span class="line">&gt;&gt;&gt;两岸猿声啼不住</span><br><span class="line">&gt;&gt;&gt;&gt;轻舟已过万重山</span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><p>朝辞白帝彩云间</p><blockquote><p>千里江陵一日还</p><blockquote><p>两岸猿声啼不住</p><blockquote><p>轻舟已过万重山</p></blockquote></blockquote></blockquote></blockquote><h1 id="4、列表"><a href="#4、列表" class="headerlink" title="4、列表"></a>4、列表</h1><hr><h2 id="4-1-有序列表"><a href="#4-1-有序列表" class="headerlink" title="4.1 有序列表"></a>4.1 有序列表</h2><p>使用”数字. “:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 注意&quot;.&quot;后要有空格</span><br><span class="line">2. 列表</span><br><span class="line">3. 有序列表</span><br></pre></td></tr></table></figure><p>效果：</p><ol><li>注意”.”后要有空格</li><li>列表</li><li>有序列表</li></ol><h2 id="4-2-无序列表"><a href="#4-2-无序列表" class="headerlink" title="4.2 无序列表"></a>4.2 无序列表</h2><p>使用”*”或”+”或”-“:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 注意符号后要有空格</span><br><span class="line">+ 列表</span><br><span class="line">- 无序列表</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li>注意符号后要有空格</li></ul><ul><li>列表</li></ul><ul><li>无序列表</li></ul><h1 id="5、代码"><a href="#5、代码" class="headerlink" title="5、代码"></a>5、代码</h1><hr><p>代码中的文本都会显示为原始内容。</p><h2 id="5-1-代码块"><a href="#5-1-代码块" class="headerlink" title="5.1 代码块"></a>5.1 代码块</h2><p>使用”```语言名称”:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">​&#96;&#96;&#96;c++</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;Hello world&quot; &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-行内代码"><a href="#5-2-行内代码" class="headerlink" title="5.2 行内代码"></a>5.2 行内代码</h2><p>使用”<code>``</code>“:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;System.out.println(&quot;Hello world!&quot;)&#96;</span><br></pre></td></tr></table></figure><p>效果：<code>System.out.println(&quot;Hello world!&quot;)</code></p><h1 id="6、分割线"><a href="#6、分割线" class="headerlink" title="6、分割线"></a>6、分割线</h1><hr><p>使用”—“或”___”或”***”（符号数大于三个即可）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">******</span><br><span class="line">----------</span><br><span class="line">_____</span><br></pre></td></tr></table></figure><p>效果：</p><hr><hr><hr><h1 id="7、跳转"><a href="#7、跳转" class="headerlink" title="7、跳转"></a>7、跳转</h1><hr><p>使用”<code>[现实的文本](跳转的链接)</code>“:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[我的博客](https:&#x2F;&#x2F;www.gigsider-fun.com)</span><br></pre></td></tr></table></figure><p>使用”&lt;跳转的链接&gt;”:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;https:&#x2F;&#x2F;www.gigsider-fun.com&gt;</span><br></pre></td></tr></table></figure><p><code>[]()</code>效果：<a href="https://www.gigsider-fun.com/">我的博客</a></p><p><code>&lt;&gt;</code>效果：<a href="https://www.gigsider-fun.com/">https://www.gigsider-fun.com</a></p><h1 id="8、图片"><a href="#8、图片" class="headerlink" title="8、图片"></a>8、图片</h1><hr><p>使用”<code>![图片的描述](图片的地址)</code>“:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![测试图片](MarkDown-First-Met&#x2F;test.png)</span><br></pre></td></tr></table></figure><p>效果：</p><img src="/blogs/MarkDown-First-Met/test.png" class="" title="markdown"><hr><blockquote><p>参考视频资料：<a href="https://www.bilibili.com/video/av87982836?t=336">https://www.bilibili.com/video/av87982836?t=336</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MarkDown 是一种轻量级标记语言。Markdown 的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MarkDown" scheme="https://gigsider.com/categories/MarkDown/"/>
    
    
      <category term="学习笔记" scheme="https://gigsider.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="MarkDown" scheme="https://gigsider.com/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>Java NIO</title>
    <link href="https://gigsider.com/blogs/Java-NIO/"/>
    <id>https://gigsider.com/blogs/Java-NIO/</id>
    <published>2020-07-31T01:55:48.000Z</published>
    <updated>2020-07-31T08:49:48.247Z</updated>
    
    <content type="html"><![CDATA[<p>​        </p><a id="more"></a><h1 id="1、NIO概念"><a href="#1、NIO概念" class="headerlink" title="1、NIO概念"></a>1、NIO概念</h1><h2 id="1-1-Unix定义了五种-I-O-模型"><a href="#1-1-Unix定义了五种-I-O-模型" class="headerlink" title="1.1 Unix定义了五种 I/O 模型"></a>1.1 Unix定义了五种 I/O 模型</h2><ul><li>阻塞 I/O</li><li>非阻塞 I/O</li><li>I/O 复用</li><li>信号驱动 I/O</li><li>异步 I/O</li></ul><h3 id="1-1-1-阻塞（Block）和非阻塞（NonBlock）"><a href="#1-1-1-阻塞（Block）和非阻塞（NonBlock）" class="headerlink" title="1.1.1 阻塞（Block）和非阻塞（NonBlock）"></a>1.1.1 阻塞（Block）和非阻塞（NonBlock）</h3><p>阻塞和非阻塞是进程在访问数据的时候，数据是否准备就绪的一种处理方式：<br>阻塞：需要等待缓冲区中的数据准备好过后才处理其他的事情，否則一直等待在那里。<br>非阻塞：进程访问数据缓冲区的时候，如果数据没有准备好则直接返回，不会等待。</p><h3 id="1-1-2-同步与异步"><a href="#1-1-2-同步与异步" class="headerlink" title="1.1.2 同步与异步"></a>1.1.2 同步与异步</h3><p>一个进程的IO调用步骤大致如下：</p><p>1、进程向操作系统请求数据</p><p>2、操作系统把外部数据加载到内核的缓冲区中</p><p>3、操作系统把内核的缓冲区拷贝到进程的缓冲区 </p><p>4、进程获得数据完成自己的功能</p><p>当操作系统在把外部数据放到进程缓冲区的这段时间（即上述的第二，三步），如果应用进程是挂起等待的，那么就是同步IO，反之，就是异步IO</p><p>Java中IO分为：<br>BIO （Blocking  IO）<br>NIO （Non-blocking  IO/New IO）<br>AIO （Asynchronous IO/NIO2）</p><h2 id="1-2-NIO模型图"><a href="#1-2-NIO模型图" class="headerlink" title="1.2 NIO模型图"></a>1.2 NIO模型图</h2><img src="/blogs/Java-NIO/image-20200730202046654.png" class="" title="image-20200730202046654"><h1 id="2、-NIO与传统IO的区别"><a href="#2、-NIO与传统IO的区别" class="headerlink" title="2、 NIO与传统IO的区别"></a>2、 NIO与传统IO的区别</h1><img src="/blogs/Java-NIO/image-20200730202205711.png" class="" title="image-20200730202205711"><table><thead><tr><th align="center">IO</th><th align="center">NIO</th></tr></thead><tbody><tr><td align="center">面向流</td><td align="center">面向缓冲</td></tr><tr><td align="center">阻塞IO</td><td align="center">非阻塞IO</td></tr><tr><td align="center">无</td><td align="center">selector</td></tr></tbody></table><h2 id="2-1-面向流与缓冲"><a href="#2-1-面向流与缓冲" class="headerlink" title="2.1 面向流与缓冲"></a>2.1 面向流与缓冲</h2><p>​        IO是面向流的，NIO是面向缓冲区的。 Java IO面向流意味着每次从流中读一个或多个字节，直至读取所有字节，它们没有被缓存在任何地方。此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓存到一个缓冲区。 Java NIO的缓冲导向方法略有不同。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性</p><h2 id="2-2-阻塞与非阻塞"><a href="#2-2-阻塞与非阻塞" class="headerlink" title="2.2 阻塞与非阻塞"></a>2.2 阻塞与非阻塞</h2><p>​        Java IO的各种流是阻塞的。这意味着，当一个线程调用read() 或 write()时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。 Java NIO的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取。而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。 非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。 线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel）。</p><h2 id="2-3-选择器（Selector）"><a href="#2-3-选择器（Selector）" class="headerlink" title="2.3 选择器（Selector）"></a>2.3 选择器（Selector）</h2><p>​        Java NIO的选择器允许一个单独的线程来监视多个输入通道，你可以注册多个通道使用一个选择器，然后使用一个单独的线程来“选择”通道：这些通道里已经有可以处理的输入，或者选择已准备写入的通道。这种选择机制，使得一个单独的线程很容易来管理多个通道。</p><h1 id="3、NIO构成组件"><a href="#3、NIO构成组件" class="headerlink" title="3、NIO构成组件"></a>3、NIO构成组件</h1><p>Java NIO Channel通道和流非常相似，主要有以下几点区别：<br>a.通道可以读也可以写，多功能高速通道，流一般来说是单向的（只能读或者写,如输入流与输出流）；<br>b.通道可以异步读写；<br>c.通道总是基于缓冲区Buffer来读写；<br>正如上面提到的，我们可以从通道中读取数据，写入到buffer，也可以中buffer内读数据，写入到通道中；下面有个示意图：</p><img src="/blogs/Java-NIO/image-20200730202755347.png" class="" title="image-20200730202755347"><p>Channel的实现：</p><ul><li><p>FileChannel   </p></li><li><p>DatagramChannel </p></li><li><p>SocketChannel  </p></li><li><p>ServerSocketChannel</p></li></ul><p>FileChannel用于文件的数据读写。 </p><p>DatagramChannel用于UDP的数据读写。 </p><p>SocketChannel用于TCP的数据读写。 </p><p>ServerSocketChannel允许我们监听TCP链接请求，每个请求会创建会一个SocketChannel.</p><p>Buffer用于和Channel交互。我们从channel中读取数据到buffers里，从buffer把数据写入到channel，Buffer本质上就是一块内存区，可以用来写入数据，并在稍后读取出来。这块内存被NIO Buffer包裹起来，对外提供一系列的读写方便开发的接口。</p><h2 id="3-1-Buffer基本用法"><a href="#3-1-Buffer基本用法" class="headerlink" title="3.1 Buffer基本用法"></a>3.1 Buffer基本用法</h2><p>利用Buffer读写数据，通常遵循四个步骤：</p><ol><li>把数据写入buffer；</li><li>调用flip；</li><li>从Buffer中读取数据；</li><li>调用buffer.clear()或者buffer.compact()</li></ol><p>当写入数据到buffer中时，buffer会记录已经写入的数据大小。当需要读数据时，通过flip()方法把buffer从写模式调整为读模式；在读模式下，可以读取所有已经写入的数据。</p><p>当读取完数据后，需要清空buffer，以满足后续写入操作。清空buffer有两种方式：调用clear()或compact()方法。clear会清空整个buffer，compact则只清空已读取的数据，未被读取的数据会被移动到buffer的开始位置，写入位置则近跟着未读数据之后。</p><p>Buffer有三个属性:<br>容量，位置，上限（capacity, position , limit）<br>buffer缓冲区实质上就是一块内存，用于写入数据，也供后续再次读取数据。这块内存被NIO Buffer管理，并提供一系列的方法用于更简单的操作这块内存。</p><h2 id="3-2-Java-NIO-Selector"><a href="#3-2-Java-NIO-Selector" class="headerlink" title="3.2 Java NIO Selector"></a>3.2 Java NIO Selector</h2><p>​        Selector是Java NIO中的一个组件，用于检查一个或多个NIO Channel的状态是否处于可读、可写。因此此可以实现单线程管理多个channels，也就是可以管理多个网络连接。</p><p>1.创建<br>        要使用必须先创建一个：<br>        创建一个selector可以通过selector.open()方法</p><p>2.注册<br>        如果要监测channel,必须先把channel注册到Selector上，这个操作使用channel.register(),</p><p>3.监测<br>        我们关注的channel状态，有四种基础类型可供监听：（观察客人发来的需求）<br> Connect,  Accept, Read ,Write 通过selectedKeys()，可以获取所有channel的相关信息，包括channel本身，以及channel的状态等信息，知道了channel的状态，我们就可以对channel进行相应的操作。</p><h1 id="4、基于NIO实现的多人聊天"><a href="#4、基于NIO实现的多人聊天" class="headerlink" title="4、基于NIO实现的多人聊天"></a>4、基于NIO实现的多人聊天</h1><h2 id="4-1-服务端"><a href="#4-1-服务端" class="headerlink" title="4.1 服务端"></a>4.1 服务端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOSelectorDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建ServerSocketChannel</span></span><br><span class="line">        ServerSocketChannel server = ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">//绑定9090端口</span></span><br><span class="line">        server.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9090</span>));</span><br><span class="line">        <span class="comment">//设置为非阻塞</span></span><br><span class="line">        server.configureBlocking(<span class="keyword">false</span>);    </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建Selector</span></span><br><span class="line">        Selector selector = Selector.open();    </span><br><span class="line">        <span class="comment">//当serversocket有连接请求时，监控这个事件</span></span><br><span class="line">        server.register(selector, SelectionKey.OP_ACCEPT);    </span><br><span class="line">        <span class="comment">//创建SocketChannel的ArrayList用于管理客户端与服务端的连接</span></span><br><span class="line">        ArrayList&lt;SocketChannel&gt; clients = <span class="keyword">new</span> ArrayList&lt;SocketChannel&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//阻塞，当至少有一个channel上有事件发生时，返回</span></span><br><span class="line">            <span class="comment">//selector.select()返回了，意味着channel发生可处理事件</span></span><br><span class="line">            selector.select();    </span><br><span class="line">            </span><br><span class="line">            <span class="comment">//获得可处理的事件selectionKeys（包含目标channel）</span></span><br><span class="line">            Set&lt;SelectionKey&gt; keys = selector.selectedKeys();    </span><br><span class="line">            Iterator&lt;SelectionKey&gt; it = keys.iterator();</span><br><span class="line">            <span class="keyword">while</span>( it.hasNext() )</span><br><span class="line">            &#123;</span><br><span class="line">                SelectionKey key = it.next();</span><br><span class="line">                it.remove();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//表示可接收请求</span></span><br><span class="line">                <span class="keyword">if</span>(key.isAcceptable())</span><br><span class="line">                &#123;</span><br><span class="line">                    ServerSocketChannel socket = (ServerSocketChannel)key.channel();</span><br><span class="line">                    <span class="comment">//接收到客户端请求时生成SocketChannel对象，用于和客户的数据传输</span></span><br><span class="line">                    SocketChannel client = socket.accept();</span><br><span class="line">                    <span class="comment">//设置为非阻塞</span></span><br><span class="line">                    client.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                    <span class="comment">//注册进Selector</span></span><br><span class="line">                    client.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                    <span class="comment">//向客户端发送消息“hello”</span></span><br><span class="line">                    ByteBuffer buf = ByteBuffer.wrap(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line">                    client.write(buf);</span><br><span class="line">                    <span class="comment">//将新客户端添加到客户列表里</span></span><br><span class="line">                    clients.add(client);    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(key.isReadable())</span><br><span class="line">                &#123;</span><br><span class="line">                    SocketChannel client = (SocketChannel)key.channel();</span><br><span class="line">                    <span class="comment">//接收来自客户端的数据，组装成msg</span></span><br><span class="line">                    ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                    client.read(buf);</span><br><span class="line">                    buf.flip();</span><br><span class="line">                    String msg = client.getRemoteAddress()+<span class="string">&quot;==&gt;&quot;</span>+<span class="keyword">new</span> String(buf.array(),<span class="number">0</span>,buf.limit());</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//将msg发送给所有客户端</span></span><br><span class="line">                    buf.clear();</span><br><span class="line">                    buf.put(msg.getBytes());</span><br><span class="line">                    buf.flip();</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clients.size(); i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        SocketChannel c = clients.get(i);</span><br><span class="line">                        c.write(buf);</span><br><span class="line">                        buf.rewind();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-客户端"><a href="#4-2-客户端" class="headerlink" title="4.2 客户端"></a>4.2 客户端</h2><h3 id="4-2-1-读线程"><a href="#4-2-1-读线程" class="headerlink" title="4.2.1 读线程"></a>4.2.1 读线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> SocketChannel socket = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReadThread</span><span class="params">(SocketChannel socket)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> ret = socket.read(buffer);</span><br><span class="line">                <span class="keyword">if</span>(ret == -<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">                buffer.flip();</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(buffer.array(),<span class="number">0</span>,buffer.limit()));</span><br><span class="line">                </span><br><span class="line">                buffer.clear();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-写线程"><a href="#4-2-2-写线程" class="headerlink" title="4.2.2 写线程"></a>4.2.2 写线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WriteThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> SocketChannel socket = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WriteThread</span><span class="params">(SocketChannel socket)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        String msg = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            msg = scanner.nextLine();</span><br><span class="line">            buffer.clear();</span><br><span class="line">            buffer.put(msg.getBytes());</span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.write(buffer);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        &lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://gigsider.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://gigsider.com/tags/JAVA/"/>
    
      <category term="学习笔记" scheme="https://gigsider.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java网络编程</title>
    <link href="https://gigsider.com/blogs/Java-Web/"/>
    <id>https://gigsider.com/blogs/Java-Web/</id>
    <published>2020-07-21T11:03:17.000Z</published>
    <updated>2020-08-01T10:26:47.623Z</updated>
    
    <content type="html"><![CDATA[<p>​         Java语言作为最流行的网络编程语言，提供了强大的网络编程功能。</p><p>​        使用Java语言可以编写底层的网络通信程序，这是通过java.net包中提供的InetAddress类、URL类、Socket类以及ServerSocket等类实现的。</p><a id="more"></a><h1 id="1、网络地址类InetAddress"><a href="#1、网络地址类InetAddress" class="headerlink" title="1、网络地址类InetAddress"></a>1、网络地址类InetAddress</h1><p>​        要实现网络通信，首先需要知道计算机的地址。连接到Internet上的计算机使用IP地址或域名来唯一标识，在局域网上的计算机则可以使用名称标识。在java.net包中提供了InetAddress类来表示计算机地址。<br>​        InetAddress类没有提供构造方法，要得到一个InetAddress类对象，需要使用该类的静态方法。</p><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddressDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            </span><br><span class="line">            InetAddress addr = InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(addr.getHostAddress());</span><br><span class="line">            System.out.println(addr.getHostName());</span><br><span class="line">            System.out.println(addr.getAddress().length);</span><br><span class="line">            </span><br><span class="line">            InetAddress addr2 = InetAddress.getByName(<span class="string">&quot;www.acfun.cn&quot;</span>);</span><br><span class="line">            System.out.println(addr2.getHostAddress());</span><br><span class="line">            System.out.println(addr2.getHostName());</span><br><span class="line">            System.out.println(addr2.getAddress().length);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2、-URL编程"><a href="#2、-URL编程" class="headerlink" title="2、 URL编程"></a>2、 URL编程</h1><h2 id="2-1-URL与URL类"><a href="#2-1-URL与URL类" class="headerlink" title="2.1 URL与URL类"></a>2.1 URL与URL类</h2><p>​        URL是统一资源定位器（Uniform Resource Locator）的简写，它是WWW中网络资源定位的表示方法。<br>​        URL的基本格式为：</p><ul><li><code>&lt;协议名://&gt;&lt;主机名&gt;[&lt;:端口号&gt;]&lt;/资源名&gt;</code></li><li>协议名表示资源使用的协议，如http、ftp、telnet、mailto或file等。</li><li>主机名为任何合法的主机域名，如<a href="http://www.njupt.edu.cn./">www.njupt.edu.cn。</a></li><li>端口号是可选的，如果使用熟知端口号，则可以省略。</li><li>资源名一般用来指定远程主机上文件系统中文件的完整路径，如/index.html。</li></ul><hr><p>​        URL类的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Url1</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String s = <span class="string">&quot;https://www.baidu.com/&quot;</span>;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(s);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Protocol:&quot;</span> + url.getProtocol()); <span class="comment">//获取协议名</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Host:&quot;</span> + url.getHost());    <span class="comment">//获取主机号</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Port:&quot;</span> + url.getPort());<span class="comment">//获取端口号，若没有指定端口号则返回-1</span></span><br><span class="line">            System.out.println(<span class="string">&quot;DefaultPort:&quot;</span> + url.getDefaultPort());    <span class="comment">//获取默认端口号</span></span><br><span class="line">            System.out.println(<span class="string">&quot;File:&quot;</span> + url.getFile());    <span class="comment">//返回URL的文件名及路径</span></span><br><span class="line"></span><br><span class="line">            InputStream is = url.openStream();</span><br><span class="line">            InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(is,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>( ( c = isr.read() ) != -<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)c);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            isr.close();</span><br><span class="line">            is.close();</span><br><span class="line">            System.out.println(<span class="string">&quot;finish&quot;</span>);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-URL的Connection类"><a href="#2-2-URL的Connection类" class="headerlink" title="2.2 URL的Connection类"></a>2.2 URL的Connection类</h2><ul><li>​    通过URL的openStream()方法，只能获得InputStream对象。使用该对象只能从网络上读取数据。</li><li>​    如果希望不仅要从URL读取内容，还要向URL对象发送服务请求及参数，可以使用URLConnection类。   </li><li>​    利用URL类提供的openConnection()方法，可以建立一个URLConnection对象。可以调用其getInputStream()方法和getOutputStream()方法得到输入流和输出流对象。</li></ul><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Url2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String surl = <span class="string">&quot;https://www.baidu.com&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(surl);</span><br><span class="line"></span><br><span class="line">            HttpURLConnection conn = (HttpURLConnection)url.openConnection();</span><br><span class="line">            conn.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line"></span><br><span class="line">            conn.setDoOutput(<span class="keyword">true</span>);  <span class="comment">//设置允许上传</span></span><br><span class="line">            <span class="comment">//http请求的一些属性</span></span><br><span class="line">            conn.setRequestProperty(<span class="string">&quot;ContentType&quot;</span>, <span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//打开连接输出流，输出数据</span></span><br><span class="line">            OutputStream os = conn.getOutputStream();</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)fis.read());</span><br><span class="line">            <span class="keyword">while</span>( (c=fis.read()) != -<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                os.write(c);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fis.close();</span><br><span class="line">            os.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当打开输入流的时候，请求发出，并得到响应</span></span><br><span class="line">            InputStream is = conn.getInputStream();</span><br><span class="line">            InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(is,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            c = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>( (c=reader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)c);</span><br><span class="line">            &#125;</span><br><span class="line">            reader.close();</span><br><span class="line">            is.close();</span><br><span class="line">            System.out.println(<span class="string">&quot;read finish&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="3、Java套接字编程"><a href="#3、Java套接字编程" class="headerlink" title="3、Java套接字编程"></a>3、Java套接字编程</h1><h2 id="3-1-端口号和套接字"><a href="#3-1-端口号和套接字" class="headerlink" title="3.1 端口号和套接字"></a>3.1 端口号和套接字</h2><p>​        在网络上，很多应用都是采用客户/服务器（C/S）结构的。实现网络通信必须将两台机器连接起来建立一个双向通信链路，这个双向通信链路的每一端称为一个套接字（Socket）。</p><p>​        在Internet上使用IP地址唯一标识一台主机。<br>​        一台主机可能提供多种服务，仅用IP地址不能唯一标识一个服务。通常使用一个整数来标识该机器上的某个服务，这个整数就是端口号（Port）。<br>​        端口号是用16位整数标识，共有65536个端口号。端口号并不是机器上实际存在的物理位置，而是一种软件上的抽象。</p><p>​        一个TCP连接由它的两个端点来标识，而每一个端点又是由IP地址和端口号决定的。TCP连接的端点称为套接字，套接字是由IP地址和端口号构成的，如下图所示。</p><img src="/blogs/Java-Web/image-20200730200111257.png" class="" title="套接字的构成"><p>​        这里，131.6.23.13为IP地址，1500为端口号，因此套接字为131.6.23.13，1500。 </p><h2 id="3-2-套接字通信"><a href="#3-2-套接字通信" class="headerlink" title="3.2 套接字通信"></a>3.2 套接字通信</h2><p>​        运行在一台特定机器上的某个服务器（如HTTP服务器）都有一个套接字绑定到该服务器上。服务器只是等待、监听客户的连接请求。<br>​        在客户端，客户机需要知道服务器的主机名和端口号。为了建立连接请求，客户机试图与服务器机上的指定端口号上的服务连接，这个请求过程如下图所示。</p><img src="/blogs/Java-Web/image-20200730200255360.png" class="" title="Client与Server连接过程"><p>​        如果正常，服务器将接受连接请求。一旦接受了请求，服务器将创建一个新的绑定到另一个端口号的套接字，然后使用该套接字与客户通信。这样，服务器可以使用原来的套接字继续监听连接请求，如图所示。</p><img src="/blogs/Java-Web/image-20200730200448790.png" class="" title="连接成功后的状态"><p>​        在客户端，如果连接被接受，就会创建一个套接字，客户就可以使用该套接字与服务器通信。注意，客户端的套接字并没有绑定到与服务器连接的端口号上，相反客户被指定客户程序所在机器上的一个端口号上。现在客户与服务器就可以读写套接字进行通信了。</p><h2 id="3-3-套接字类"><a href="#3-3-套接字类" class="headerlink" title="3.3 套接字类"></a>3.3 套接字类</h2><p>​        为了实现套接字通信，在java.net包中提供了两个类：Socket和ServerSocket。它们分别实现连接的客户端和服务器端的套接字。</p><h3 id="3-3-1-Socket类"><a href="#3-3-1-Socket类" class="headerlink" title="3.3.1 Socket类"></a>3.3.1 Socket类</h3><p>Client和Server都需定义出该类的对象。创建对象时，端口号必须对应。\</p><p><code>public InputStrean getInputStream() throws IOException </code></p><p>获得套接字绑定的数据输入流。<br><code>    public OutputStream getOutputStream() throws IOException</code> </p><p>获得套接字绑定的数据输出流。</p><h3 id="3-3-2-ServerSocket类"><a href="#3-3-2-ServerSocket类" class="headerlink" title="3.3.2 ServerSocket类"></a>3.3.2 ServerSocket类</h3><p>​        用在服务器端。客户与服务器通信，客户向服务器提出请求，服务器监听请求，一旦监听到客户请求，服务器也要建立一个套接字。</p><h3 id="3-3-3-客户和服务器通信的实例"><a href="#3-3-3-客户和服务器通信的实例" class="headerlink" title="3.3.3 客户和服务器通信的实例"></a>3.3.3 客户和服务器通信的实例</h3><p>包括以下4个基本步骤：<br>（1）创建套接字对象。<br>（2）打开连接到套接字的输入输出流。<br>（3）按照一定协议对套接字进行读写操作。<br>（4）关闭套接字对象。</p><img src="/blogs/Java-Web/image-20200730202513980.png" class="" title="通信示意图"><p>eg:</p><p>服务器代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//服务器监听在本机的8000端口</span></span><br><span class="line">            </span><br><span class="line">            ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8000</span>);</span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">&quot;server start..&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//当接受到客户端请求后，生成一个socket，用于和客户端的数据传输</span></span><br><span class="line">            Socket socket = server.accept();<span class="comment">//阻塞，等待客户端连接请求</span></span><br><span class="line">            </span><br><span class="line">            System.out.println(socket.getRemoteSocketAddress());<span class="comment">//得到Client的Socket地址</span></span><br><span class="line">            System.out.println(socket.getLocalSocketAddress());<span class="comment">//得到Server的Socket地址</span></span><br><span class="line">            </span><br><span class="line">            InputStream is = socket.getInputStream();</span><br><span class="line">            OutputStream os = socket.getOutputStream();</span><br><span class="line">            os.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line">            os.flush();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">byte</span>[] bts = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//采用的是阻塞IO（若没有数据，就一直等待）</span></span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            <span class="keyword">while</span>( <span class="keyword">true</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                count = is.read(bts, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">                str = <span class="keyword">new</span> String(bts,<span class="number">0</span>,count);</span><br><span class="line">                System.out.println(<span class="string">&quot;Client say:&quot;</span>+str);</span><br><span class="line">                <span class="keyword">if</span>( str.equals(<span class="string">&quot;bye&quot;</span>))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                str = scanner.nextLine();</span><br><span class="line">                os.write(str.getBytes());</span><br><span class="line">                os.flush();</span><br><span class="line">                <span class="keyword">if</span>( str.equals(<span class="string">&quot;bye&quot;</span>) )</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            is.close();</span><br><span class="line">            os.close();</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">&quot;server stop..&quot;</span>);</span><br><span class="line">        </span><br><span class="line">            server.close();</span><br><span class="line">        </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//参数是要连接的服务器地址和端口，发出连接请求，建立连接</span></span><br><span class="line">            Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;localhost&quot;</span>,<span class="number">8000</span>);</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            InputStream is = socket.getInputStream();</span><br><span class="line">            OutputStream os = socket.getOutputStream();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">byte</span>[] bts = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">int</span> count = is.read(bts, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Server say:&quot;</span>+<span class="keyword">new</span> String(bts,<span class="number">0</span>,<span class="number">20</span>));</span><br><span class="line">            </span><br><span class="line">             count = <span class="number">0</span>;</span><br><span class="line">            String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            <span class="keyword">while</span>( <span class="keyword">true</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                str = scanner.nextLine();</span><br><span class="line">                os.write(str.getBytes());</span><br><span class="line">                os.flush();</span><br><span class="line">                <span class="keyword">if</span>( str.equals(<span class="string">&quot;bye&quot;</span>) )</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                        </span><br><span class="line">                count = is.read(bts, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">                str = <span class="keyword">new</span> String(bts,<span class="number">0</span>,count);</span><br><span class="line">                System.out.println(<span class="string">&quot;Server say:&quot;</span>+str);</span><br><span class="line">                <span class="keyword">if</span>( str.equals(<span class="string">&quot;bye&quot;</span>))</span><br><span class="line">                    <span class="keyword">break</span>;        </span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            is.close();</span><br><span class="line">            os.close();</span><br><span class="line"></span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-3-4-多个客户端和服务器通信实例"><a href="#3-3-4-多个客户端和服务器通信实例" class="headerlink" title="3.3.4 多个客户端和服务器通信实例"></a>3.3.4 多个客户端和服务器通信实例</h3><p>Server：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServerSocket server = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = <span class="keyword">new</span> ServerSocket(<span class="number">9000</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>( <span class="keyword">true</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                Socket socket = server.accept();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//启动客户端线程，独立完成通信</span></span><br><span class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> ClientThreadDemo(socket)).start();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;server start fail..&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(server !=<span class="keyword">null</span>)</span><br><span class="line">                    server.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//参数是要连接的服务器地址和端口，发出连接请求，建立连接</span></span><br><span class="line">            Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;localhost&quot;</span>,<span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line">            InputStream is = socket.getInputStream();</span><br><span class="line">            OutputStream os = socket.getOutputStream();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">byte</span>[] bts = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">int</span> count = is.read(bts, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Server say:&quot;</span>+<span class="keyword">new</span> String(bts,<span class="number">0</span>,<span class="number">20</span>));</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">             count = <span class="number">0</span>;</span><br><span class="line">            String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            <span class="keyword">while</span>( <span class="keyword">true</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                str = scanner.nextLine();</span><br><span class="line">                os.write(str.getBytes());</span><br><span class="line">                os.flush();</span><br><span class="line">                <span class="keyword">if</span>( str.equals(<span class="string">&quot;bye&quot;</span>) )</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                        </span><br><span class="line">                count = is.read(bts, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">                str = <span class="keyword">new</span> String(bts,<span class="number">0</span>,count);</span><br><span class="line">                System.out.println(<span class="string">&quot;Server say:&quot;</span>+str);</span><br><span class="line">                <span class="keyword">if</span>( str.equals(<span class="string">&quot;bye&quot;</span>))</span><br><span class="line">                    <span class="keyword">break</span>;        </span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            is.close();</span><br><span class="line">            os.close();</span><br><span class="line"></span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ClientThread:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientThreadDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">ClientThreadDemo</span><span class="params">(Socket socket)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">         is = socket.getInputStream();</span><br><span class="line">         os = socket.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line">        os.flush();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">byte</span>[] bts = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//采用的是阻塞IO（若没有数据，就一直等待）</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>( <span class="keyword">true</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            count = is.read(bts, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">            str = <span class="keyword">new</span> String(bts,<span class="number">0</span>,count);</span><br><span class="line">            System.out.println(<span class="string">&quot;Client say:&quot;</span>+str);</span><br><span class="line">            <span class="keyword">if</span>( str.equals(<span class="string">&quot;bye&quot;</span>))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            str = scanner.nextLine();</span><br><span class="line">            os.write(str.getBytes());</span><br><span class="line">            os.flush();</span><br><span class="line">            <span class="keyword">if</span>( str.equals(<span class="string">&quot;bye&quot;</span>) )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(is != <span class="keyword">null</span>) is.close();</span><br><span class="line">                <span class="keyword">if</span>(os != <span class="keyword">null</span>) os.close();</span><br><span class="line">                <span class="keyword">if</span>(socket != <span class="keyword">null</span>) socket.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4、数据报通信"><a href="#4、数据报通信" class="headerlink" title="4、数据报通信"></a>4、数据报通信</h1><h2 id="4-1-流式通信和数据报通信"><a href="#4-1-流式通信和数据报通信" class="headerlink" title="4.1 流式通信和数据报通信"></a>4.1 流式通信和数据报通信</h2><p>​        <strong>当编写网络程序时，有两种通信可供选择：流式通信和数据报通信。</strong></p><table><thead><tr><th align="center">流式通信</th><th align="center">数据报通信</th></tr></thead><tbody><tr><td align="center">流式通信使用TCP协议，该协议是面向连接的协议。使用这种协议要求发送方和接收方都要建立套接字，一旦两个套接字建立起来，它们就可以进行双向通信，双方都可以发送和接收数据。</td><td align="center">数据报通信使用UDP协议，该协议是一种无连接的协议。使用这种协议通信，每个数据报都是一个独立的信息单元，它包括完整的目的地址，数据报在网络上以任何可能的路径传往目的地，因此数据能否到达目的地、到达的时间以及内容的正确性都是不能保证，该协议提供的是不可靠的服务。</td></tr><tr><td align="center">对于TCP，是一个面向连接的协议，在通信之前必须建立双方的连接，因此在TCP中多了一个建立连接的时间。</td><td align="center">使用UDP时，每个数据报都给出了完整的地址信息，无需建立发送方和接收方的连接。</td></tr><tr><td align="center">使用TCP就没有大小限制，一旦连接建立，就可以传输大量数据。</td><td align="center">使用UDP传输数据时有大小限制，每个数据报必须不大于64KB。</td></tr><tr><td align="center">TCP是可靠协议，确保接收方完全正确地获取发送方发送的数据。</td><td align="center">UDP是不可靠协议，发送方发送的数据不一定以相同的次序到达接收方。</td></tr><tr><td align="center">TCP使用较广泛，如TELNET远程登录、FTP文件传输都需要不定长度的数据可靠地传输，因此使用TCP协议。</td><td align="center">UDP比较简单，需要较少的监护，因此常用于局域网分散系统中的客户/服务器应用程序。</td></tr></tbody></table><h2 id="4-2-DatagramSocket和DatagramPacket"><a href="#4-2-DatagramSocket和DatagramPacket" class="headerlink" title="4.2 DatagramSocket和DatagramPacket"></a>4.2 DatagramSocket和DatagramPacket</h2><p>​        用UDP编写客户/服务器程序时，无论是客户方还是服务器方，首先都要建立一个DatagramSocket对象用来接收或发送数据报，然后使用DatagramPacket类对象作为传输数据的载体。</p><h3 id="4-2-1-数据报通信实例"><a href="#4-2-1-数据报通信实例" class="headerlink" title="4.2.1 数据报通信实例"></a>4.2.1 数据报通信实例</h3><p>Server:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPServerDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            </span><br><span class="line">            DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9090</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buf, <span class="number">1024</span>);</span><br><span class="line">            </span><br><span class="line">            socket.receive(packet);  <span class="comment">//阻塞</span></span><br><span class="line">        </span><br><span class="line">            System.out.println(<span class="string">&quot;Client address:&quot;</span>+packet.getSocketAddress());</span><br><span class="line">            System.out.println(<span class="string">&quot;Client data:&quot;</span>+<span class="keyword">new</span> String(packet.getData(),<span class="number">0</span>,packet.getLength()));</span><br><span class="line">            </span><br><span class="line">            String str = <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">            <span class="comment">//从接收到的数据报取得对方的地址和端口</span></span><br><span class="line">            DatagramPacket spacket = <span class="keyword">new</span> DatagramPacket(str.getBytes(), str.getBytes().length, packet.getAddress(), packet.getPort());</span><br><span class="line">            </span><br><span class="line">            socket.send(spacket);</span><br><span class="line">            </span><br><span class="line">            socket.close();</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPClientDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            </span><br><span class="line">            DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9091</span>);</span><br><span class="line">        </span><br><span class="line">            String str = <span class="string">&quot;hello server&quot;</span>;</span><br><span class="line"></span><br><span class="line">            DatagramPacket spacket = <span class="keyword">new</span> DatagramPacket(str.getBytes(), str.getBytes().length,InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>),<span class="number">9090</span>);</span><br><span class="line">            </span><br><span class="line">            socket.send(spacket);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buf, <span class="number">1024</span>);</span><br><span class="line">            </span><br><span class="line">            socket.receive(packet);  <span class="comment">//阻塞</span></span><br><span class="line">        </span><br><span class="line">            System.out.println(packet.getSocketAddress());</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(packet.getData(),<span class="number">0</span>,packet.getLength()));</span><br><span class="line">            </span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-基于线程实现一对一通信"><a href="#4-2-2-基于线程实现一对一通信" class="headerlink" title="4.2.2 基于线程实现一对一通信"></a>4.2.2 基于线程实现一对一通信</h3><p>UDPPeerDemo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UDPReceiveThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DatagramSocket socket;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UDPReceiveThread</span><span class="params">(DatagramSocket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> [] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        DatagramPacket p = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>( <span class="keyword">true</span> ) &#123;</span><br><span class="line">            p = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">1024</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.receive(p);</span><br><span class="line">                System.out.println(<span class="string">&quot;Data: &quot;</span> + <span class="keyword">new</span> String(p.getData(),<span class="number">0</span>,p.getLength()));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPPeerDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DatagramSocket socket;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rport;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UDPPeerDemo</span><span class="params">(<span class="keyword">int</span> port,<span class="keyword">int</span> rport)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        <span class="keyword">this</span>.rport = rport;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket(port);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;套接字创建失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> UDPReceiveThread(socket)).start();  <span class="comment">//启动接收线程</span></span><br><span class="line">        String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        DatagramPacket packet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>( scanner.hasNextLine() ) &#123;</span><br><span class="line">            s = scanner.nextLine();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                packet = <span class="keyword">new</span> DatagramPacket(s.getBytes(), s.getBytes().length,</span><br><span class="line">                        InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>), rport);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.send(packet);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        socket.close();    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UDPDemo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> UDPPeerDemo(<span class="number">9090</span>, <span class="number">9091</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UDPDemo2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> UDPPeerDemo(<span class="number">9091</span>, <span class="number">9090</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5、小结"><a href="#5、小结" class="headerlink" title="5、小结"></a>5、小结</h1><p>​        通过网络资源定位器可以指向并获取网络上丰富的资源。基于TCP的网络数据传输是一种可靠的有连接的网络数据传输。这种传输方式是目前最常用的网络数据传输方式。在基于TCP的网络程序中，服务器端与客户端的程序编写稍有些不同。<br>​        基于UDP的网络数据传输是一种可靠的无连接的网络数据传输。在基于UDP的网络程序设计中，服务器端与客户端的程序编写基本上是相类似的。在Java的包java.net还含有很多用于网络数据传输的类和接口，为网络编程提供了方便。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​         Java语言作为最流行的网络编程语言，提供了强大的网络编程功能。&lt;/p&gt;
&lt;p&gt;​        使用Java语言可以编写底层的网络通信程序，这是通过java.net包中提供的InetAddress类、URL类、Socket类以及ServerSocket等类实现的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://gigsider.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://gigsider.com/tags/JAVA/"/>
    
      <category term="网络编程" scheme="https://gigsider.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>IO流</title>
    <link href="https://gigsider.com/blogs/Java-IO/"/>
    <id>https://gigsider.com/blogs/Java-IO/</id>
    <published>2020-07-20T08:24:58.000Z</published>
    <updated>2020-08-01T10:29:14.911Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><a id="more"></a><h1 id="1、流的概念"><a href="#1、流的概念" class="headerlink" title="1、流的概念"></a>1、流的概念</h1><h2 id="1-1流"><a href="#1-1流" class="headerlink" title="1.1流"></a>1.1流</h2><p>（1）流是一个无结构化的数据组成的序列，流中的数据没有任何格式和含义，只是以字节或字符形式进行流入或流出。</p><p>（2）数据流的流入和流出都是以程序本身作为核心，流入是指数据从外部数据源流入到程序内部；流出是指数据从程序内部向外部流出到数据的目的地。 </p><p>（3）不管是流入还是流出，其数据的流动都是通过一个管道进行的，管道两端分别连接数据源和数据目的地。</p><p>（4）流的本质就是进行数据传输，因此Java根据数据传输的特性将流抽象成各种类，以方便进行数据操作。</p><img src="/blogs/Java-IO/1_1.png" class="" title="图1.1"><h2 id="1-2流的分类"><a href="#1-2流的分类" class="headerlink" title="1.2流的分类"></a>1.2流的分类</h2><ul><li>根据处理数据类型，可以分为字节流和字符流。</li><li>根据数据的流向可以分为输入流和输出流。</li><li>根据处理数据功能，可以分为实体流和装饰流。</li><li>实体流对数据不做任何处理，只完成基本的读写操作。</li><li>装饰流是在实体流的基础上，提供更高级的功能。</li><li>这些流都在java.io包中。</li></ul><h3 id="1-2-1字节流"><a href="#1-2-1字节流" class="headerlink" title="1.2.1字节流"></a>1.2.1字节流</h3><ul><li>在数据传输过程中以字节为单位进行输入和输出。</li><li>适用于传输各种类型的文件或数据。</li><li>在字节输入流中，InputStream 类是所有的输入字节流的父类，它是一个抽象类。</li><li>其子类中的ByteArrayInputStream、FileInputStream 是两种基本的实体流。</li><li>ObjectInputStream 和所有FilterInputStream 的子类都是装饰流。</li><li>在字节输出流中，OutputStream 是所有的输出字节流的父类，它是一个抽象类。</li><li>ByteArrayOutputStream、FileOutputStream 是两种基本的实体流。</li><li>ObjectOutputStream 和所有FilterOutputStream 的子类都是装饰流。</li></ul><img src="/blogs/Java-IO/1_2.png" class="" title="图1.2"><h3 id="1-2-2字符流"><a href="#1-2-2字符流" class="headerlink" title="1.2.2字符流"></a>1.2.2字符流</h3><ul><li>在数据传输过程中以字符为单位进行输入和输出。</li><li>根据字符编码表，一个字符占用两个字节，因此字符流只适用于字符类型数据的处理。</li><li>在字符输入流中，Reader 是所有的输入字符流的父类，它是一个抽象类。</li><li>InputStreamReader 是一个连接字节流和字符流的桥梁，它使用指定的字符集读取字节并转换成字符。</li><li>其FileReader子类可以更方便地读取字符文件，也是常用的Reader流对象。</li><li>在字符输出流中，Writer是所有的输出字符流的父类，也是一个抽象类。</li><li>相对输入流的子类，输出流当中也有相应的输出子类，只是数据传输方向相反。</li><li>这些类有OutputStreamWriter及其子类FileWriter、 CharArrayWriter、StringWriter 、BufferedWriter 、PipedWriter等。</li></ul><img src="/blogs/Java-IO/1_3.png" class="" title="图1.3"><h1 id="2、File类"><a href="#2、File类" class="headerlink" title="2、File类"></a>2、File类</h1><h2 id="2-1文件对象与文件属性"><a href="#2-1文件对象与文件属性" class="headerlink" title="2.1文件对象与文件属性"></a>2.1文件对象与文件属性</h2><p>​    文件用文件类的对象表示，有了文件对象就可以获取文件属性。</p><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="center">File(String filename)</td><td align="center">在当前路径下，创建一个名字为filename的文件</td></tr></tbody></table><p>|          | File(String path,<br>String filename) | 在给定的path路径下，创建一个名字为filename的文件 |<br>|  String  |             getName()             |             获取此文件（目录）的名称             |<br>|  String  |             getPath()             |                 获取路径名字符串                 |<br>|   long   |             length()              |   获取文件的长度。如果表示目录，则返回值不确定   |<br>| boolean  |             canRead()             |                 判断文件是否可读                 |<br>|  String  |         getAbsolutePath()         |                 获取路径名字符串                 |<br>| boolean  |            canWrite()             |                 判断文件是否可写                 |<br>| boolean  |           canExecute()            |                 判断文件是否执行                 |<br>| boolean  |             exists()              |             判断文件（目录）是否存在             |<br>| boolean  |             isFile()              |            判断文件是否是一个标准文件            |<br>| boolean  |           isDirectory()           |              判断文件是否是一个目录              |<br>| boolean  |            isHidden()             |            判断文件是否是一个隐藏文件            |<br>|   long   |          lastModified()           |           判断文件最后一次被修改的时间           |</p><h2 id="2-2目录"><a href="#2-2目录" class="headerlink" title="2.2目录"></a>2.2目录</h2><p>​    Java把目录作为一种特殊的文件进行处理，它除了具备文件的基本属性如文件名、所在路径等信息以外，同时也提供了专用于目录的一些操作方法。</p><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">mkdir()</td><td align="center">创建一个目录，并返回创建结果。成功返回true，失败（目录已存在）返回false</td></tr><tr><td align="center">boolean</td><td align="center">mkdirs()</td><td align="center">创建一个包括父目录在内的目录。创建所有目录成功返回true，如果失败返回false，但要注意的是有可能部分目录已创建成功</td></tr><tr><td align="center">String[]</td><td align="center">list()</td><td align="center">获取目录下字符串表示形式的文件名和目录名</td></tr><tr><td align="center">String[]</td><td align="center">list(FilenameFilter filter)</td><td align="center">获取满足指定过滤器条件的字符串表示形式的文件名和目录名</td></tr><tr><td align="center">File[]</td><td align="center">listFiles()</td><td align="center">获取目录下文件类型表示形式的文件名和目录名</td></tr><tr><td align="center">File[]</td><td align="center">listFiles(FileFilter filter)</td><td align="center">获取满足指定过滤器文件条件的文件表示形式的文件名和目录名</td></tr><tr><td align="center">File[]</td><td align="center">listFiles(FilenameFliter fliter)</td><td align="center">获取满足指定过滤器路径和文件条件的文件表示形式的文件名和目录名</td></tr></tbody></table><h2 id="2-3文件的操作"><a href="#2-3文件的操作" class="headerlink" title="2.3文件的操作"></a>2.3文件的操作</h2><ol><li><p>创建文件File类的方法：</p><p><code>public boolean createNewFile()</code></p><p><code>File file = new File(“D:\\”,”hello.txt”)</code></p><p><code>file.createNewFile();</code></p></li><li><p>删除文件File类中的方法:</p><p><code>file.delete()</code></p></li><li><p>运行可执行文件</p><p>首先利用Runtime类的静态方法创建一个Runtime对象:</p><p><code>Runtime ec = Runtime.getRuntime();</code></p><p>然后用ec调用方法：</p><p><code>Process exec(String command);</code></p></li></ol><h2 id="2-4-Scanner类与文件"><a href="#2-4-Scanner类与文件" class="headerlink" title="2.4 Scanner类与文件"></a>2.4 Scanner类与文件</h2><p>​    利用Scanner类的对象还可以从文件中读取数据:</p><p>  <code>Scanner input=new Scanner(文件类对象)</code></p><p>​    创建的Scanner类的对象使用read()方法即可从文件中读数据。</p><p>​    读数据时默认以空格作为数据的分隔标记。</p><h1 id="3、字节流和字符流"><a href="#3、字节流和字符流" class="headerlink" title="3、字节流和字符流"></a>3、字节流和字符流</h1><h2 id="3-1字节流"><a href="#3-1字节流" class="headerlink" title="3.1字节流"></a>3.1字节流</h2><p>​    抽象类InputStream和抽象类OutputStream是所有字节流类的根类，其他字节流类都继承自这两个类。</p><h3 id="3-1-1-字节输入流InputStream"><a href="#3-1-1-字节输入流InputStream" class="headerlink" title="3.1.1 字节输入流InputStream"></a>3.1.1 字节输入流InputStream</h3><p>​    字节输入流的作用是从数据输入源（例如从磁盘、网络等）获取字节数据到应用程序（内存）中。</p><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">read()</td><td align="center">从输入流中读取下一个字节，返回读入的字节数据；如果读到末尾，返回-1</td></tr><tr><td align="center">int</td><td align="center">read(byte b[])</td><td align="center">从输入流中读取一定数量的字节保存到字节数组中，并返回实际读取的字节数</td></tr></tbody></table><p>|   int    | read(byte b[],int off,<br>int len) | 从输入流中读取最多len个字节，保存到数组b中从off开始的位置，并返回实际读入的字节数；如果off+len 大于b.length，或者off 和len中有一个是负数，那么会抛出IndexOutOfBoundsException异常 |<br>|   long   |          skip(long n)          |     从输入流中跳过并丢弃n个字节，并返回实际跳过的字节数      |<br>|   void   |            close()             |  关闭输入流，释放资源。对流的读取完毕后调用该方法以释放资源  |<br>|   int    |          available()           |          返回此输入流可以读取（或跳过）的估计字节数          |<br>|   void   |      mark(int readlimit)       | 在输入流中标记当前的位置。参数readlimit为标记失效前最多读取的字节数。如果读取的字节数超出此范围则标记失效 |<br>|   void   |            reset()             |       将输入流重新定位到最后一次调用 mark 方法时的位置       |<br>| boolean  |        markSupported()         | 测试此输入流是否支持 mark 和 reset 方法。只有带缓存的输入流支持标记功能 |</p><h3 id="3-1-2-文件字节输入流类FileInputStream"><a href="#3-1-2-文件字节输入流类FileInputStream" class="headerlink" title="3.1.2 文件字节输入流类FileInputStream"></a>3.1.2 文件字节输入流类FileInputStream</h3><p>​    在进行字节输入流操作时，经常使用的是InputStream类的子类FileInputStream，实现简单的文件数据读取。</p><p>​    FileInputStream类的常用构造方法：</p><p><code>public FileInputStream(File file) throws FileNotFoundException</code></p><p><code>public FileInputStream(String name) throws FileNotFoundException</code></p><p>​    通过给定的File对象和文件创建文件字节输入流对象。</p><p>​    在创建输入流时，如果文件不存在或出现其他问题，会抛出FileNotFoundException异常，所以要注意捕获。</p><p><strong>字节输入流读数据步骤：</strong></p><ol><li>设定输入流的数据源</li><li>创建指向这个数据源的输入流</li><li>从输入流中读取数据</li><li>关闭输入流</li></ol><h3 id="3-1-3-字节输出流OutputStream"><a href="#3-1-3-字节输出流OutputStream" class="headerlink" title="3.1.3 字节输出流OutputStream"></a>3.1.3 字节输出流OutputStream</h3><p>​    字节输出流的作用是将字节数据从应用程序（内存）中传送到输出目的地，如外部设备、网络等。</p><p>​    字节输出流OutputStream的常用方法。</p><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">void</td><td align="center">write(int b)</td><td align="center">将整数b的低8位写到输出流</td></tr><tr><td align="center">void</td><td align="center">write(byte b[])</td><td align="center">将字节数组中数据写到输出流</td></tr></tbody></table><p>|   void   | write(byte b[ ],<br>int off,int len) | 从字节数组b的off处写len个字节数据到输出流  |<br>|   void   |             flush()              | 强制将输出流保存在缓冲区中的数据写到输出流 |<br>|   void   |             close()              |            关闭输出流，释放资源            |</p><h3 id="3-1-4-文件字节输出流类FileOutputStream"><a href="#3-1-4-文件字节输出流类FileOutputStream" class="headerlink" title="3.1.4 文件字节输出流类FileOutputStream"></a>3.1.4 文件字节输出流类FileOutputStream</h3><p>​    在进行字节输出流操作时，经常使用的是OutputStream类的子类FileOutputStream，用于将数据写入File或其他的输出流。</p><p>​    FileOutputStream类的常用构造方法：</p><p><code>public FileOutputStream(File file) throws IOException</code></p><p><code>public FileOutnputStream(String name) throws IOException</code></p><p><code>public FileOutputStream(File file, boolean append) throws IOException</code></p><p><code>public FileOutputStream(String name, boolean append) throws IOException</code></p><p>  <strong>字节输出流写数据步骤</strong>：</p><ol><li>设定输出流的目的地</li><li>创建指向这目的地输出</li><li>向输出流中写入数据</li><li>关闭输出流</li></ol><p>​    在完成写操作过程中，系统会将数据暂存到缓冲区中，缓冲区存满后再一次性写入到输出流中。</p><p>​    执行close()方法时，不管缓冲区是否已满，都会把其中的数据写到输出流。</p><h2 id="3-2-字符流"><a href="#3-2-字符流" class="headerlink" title="3.2 字符流"></a>3.2 字符流</h2><p>​    字符流通常用于文本文件的传输。</p><p>​    抽象类Reader和抽象类Writer是所有字符流类的根类，其他字符流类都继承自这两个类。</p><p>​    其中一些子类还在传输过程中对数据做了进一步处理以方便用户的使用。</p><h3 id="3-2-1-字符输入流Reader"><a href="#3-2-1-字符输入流Reader" class="headerlink" title="3.2.1 字符输入流Reader"></a>3.2.1 字符输入流Reader</h3><p>​    字符输入流Reader是所有字符输入流类的父类，实现从数据源读入字符数据。常用方法有：</p><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">read()</td><td align="center">从输入流读取单个字符</td></tr><tr><td align="center">int</td><td align="center">read(char[] cbuf)</td><td align="center">从输入流读取字符保存到数组cbuf中，返回读取的字符数，如果已到达流的末尾，则返回 -1</td></tr><tr><td align="center">int</td><td align="center">read(char[] cbuf,int off,int len)</td><td align="center">从输入流读取最多len个字符保存到字符数组cbuf中，存放的起始位置在off处。返回：读取的字符数，如果已到达流的末尾，则返回 -1</td></tr></tbody></table><p>|   long   |           skip(long n)            |             跳过n个字符。<br>返回：实际跳过的字符数              |<br>|   void   |     mark(int readAheadLimit)      |                      标记流中的当前位置                      |<br>|   void   |              reset()              |                           重置该流                           |<br>| boolean  |          markSupported()          |                 判断此流是否支持 mark() 操作                 |<br>|   void   |              close()              |                      关闭该流，释放资源                      |</p><h3 id="3-2-2-文件字符输入流FileReader"><a href="#3-2-2-文件字符输入流FileReader" class="headerlink" title="3.2.2 文件字符输入流FileReader"></a>3.2.2 文件字符输入流FileReader</h3><p>​    进行字符输入流操作时，经常使用的是Reader类的子类FileReader，用于从输入流读取数据。</p><p>​    FileReader类的常用构造方法：</p><p><code>public FileReader(File file) throws FileNotFoundException</code></p><p><code>public FileReader(String name) throws FileNotFoundException</code></p><p>​    通过给定的File对象或文件名创建字符输入流。</p><p>​    在创建输入流时，如果文件不存在或出现其他问题，会抛出FileNotFoundException异常。</p><h3 id="3-2-3-字符输出流Writer"><a href="#3-2-3-字符输出流Writer" class="headerlink" title="3.2.3 字符输出流Writer"></a>3.2.3 字符输出流Writer</h3><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">void</td><td align="center">write(int c)</td><td align="center">将整数c的低16位写到输出流</td></tr><tr><td align="center">void</td><td align="center">write(char[] cbuf)</td><td align="center">将字符数组中数据写到输出流</td></tr><tr><td align="center">void</td><td align="center">write(cbuf[ ],int off,int len)</td><td align="center">从字符数组cbuf的off处开始取len个字符写到输出流</td></tr><tr><td align="center">void</td><td align="center">write(String str)</td><td align="center">将字符串写到输出流</td></tr><tr><td align="center">void</td><td align="center">write(String str,int off,int len)</td><td align="center">从字符串str的off处开始取len个字符数据写到输出流</td></tr><tr><td align="center">void</td><td align="center">flush()</td><td align="center">强制将输出流保存在缓冲区中的数据写到输出</td></tr><tr><td align="center">void</td><td align="center">close()</td><td align="center">关闭输出流，释放资源</td></tr></tbody></table><h3 id="3-2-4-文件字符输出流FileWriter类"><a href="#3-2-4-文件字符输出流FileWriter类" class="headerlink" title="3.2.4 文件字符输出流FileWriter类"></a>3.2.4 文件字符输出流FileWriter类</h3><p>​    FileWriter类和字节流FileOutputStream类相对应，实现字符的输出操作，实现方法也基本相同。FileWriter类的常用构造方法：</p><p><code>public FileWriter(File file) throws IOException</code></p><p><code>public FileWriter(String name) throws IOException</code></p><p><code>public FileWriter(File file, boolean append) throws IOException</code></p><p><code>public FileWriter(String name, boolean append) throws IOException</code></p><p>​    如果第二个参数为 true，则将字符写入文件末尾处，而不是写入文件开始处。</p><p>​    如果文件不存在或出现其他问题，会抛出IOException异常。</p><h1 id="4、数据流"><a href="#4、数据流" class="headerlink" title="4、数据流"></a>4、数据流</h1><p>​    数据流是Java提供的一种装饰类流。</p><p>​    建立在实体流基础上，让程序不需考虑数据所占字节个数的情况下就能够正确地完成读写操作。</p><p>​    DataInputStream类和DataOutputStream类分别为数据输入流类和数据输出流类。</p><h2 id="4-1-数据输入流"><a href="#4-1-数据输入流" class="headerlink" title="4.1 数据输入流"></a>4.1 数据输入流</h2><p>​    数据输入流DataInputStream类允许程序以与机器无关方式从底层输入流中读取基本 Java 数据类型。</p><p>​    DataInputStream类的常用方法：</p><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="center">DataInputStream(InputStream in)</td><td align="center">使用指定的实体流 InputStream 创建一个DataInputStream</td></tr><tr><td align="center">boolean</td><td align="center">readBoolean()</td><td align="center">读取一个布尔值</td></tr><tr><td align="center">byte</td><td align="center">readByte()</td><td align="center">读取一个字节</td></tr><tr><td align="center">char</td><td align="center">readChar()</td><td align="center">读取一个字符</td></tr><tr><td align="center">long</td><td align="center">readLong()</td><td align="center">读取一个长整型数</td></tr><tr><td align="center">int</td><td align="center">readInt()</td><td align="center">读取一个整数</td></tr><tr><td align="center">short</td><td align="center">readShort()</td><td align="center">读取一个短整型数</td></tr><tr><td align="center">float</td><td align="center">readFloat()</td><td align="center">读取一个Float数</td></tr><tr><td align="center">double</td><td align="center">readDouble()</td><td align="center">读取一个Double数</td></tr><tr><td align="center">String</td><td align="center">readUTF()</td><td align="center">读取一个UTF字符串</td></tr><tr><td align="center">int</td><td align="center">skipBytes(int n)</td><td align="center">跳过并丢弃n个字节，返回实际跳过的字节数</td></tr></tbody></table><h2 id="4-2-数据输出流"><a href="#4-2-数据输出流" class="headerlink" title="4.2 数据输出流"></a>4.2 数据输出流</h2><p>​    数据输出流DataOutputStream类允许程序以适当方式将基本Java数据类型写入输出流中。DataOutputStream类的常用方法：</p><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="center">DataOuputStream</td><td align="center"></td></tr><tr><td align="center">(OutputStream out)</td><td align="center">创建一个新的数据输出流，将数据写入指定基础输出流</td><td align="center"></td></tr><tr><td align="center">void</td><td align="center">writeBoolean(Boolean v)</td><td align="center">将一个布尔值写出到输出流</td></tr><tr><td align="center">void</td><td align="center">writeByte(int v)</td><td align="center">将一个字节写出到输出流</td></tr><tr><td align="center">void</td><td align="center">writeBytes(String s)</td><td align="center">将字符串按字节（每个字符的高八位丢弃）顺序写出到输出流中</td></tr><tr><td align="center">void</td><td align="center">writeChar(int c)</td><td align="center">将一个 char 值以2字节值形式写入输出流中，先写入高字节</td></tr><tr><td align="center">void</td><td align="center">writeChars(String s)</td><td align="center">将字符串按字符顺序写出到输出流</td></tr><tr><td align="center">void</td><td align="center">writeLong(long v)</td><td align="center">将一个长整型数写出到输出流</td></tr><tr><td align="center">void</td><td align="center">writeInt(int v)</td><td align="center">将一个整数写出到输出流</td></tr><tr><td align="center">void</td><td align="center">writeShort(int v)</td><td align="center">将一个短整型数写出到输出流</td></tr><tr><td align="center">void</td><td align="center">writeFloat(float v)</td><td align="center">将一个Float数写出到输出流</td></tr><tr><td align="center">void</td><td align="center">writeDouble(double v)</td><td align="center">将一个Double数写出到输出流</td></tr><tr><td align="center">void</td><td align="center">writeUTF(String s)</td><td align="center">将一个字符串用UTF-8编码形式写出到输出流</td></tr><tr><td align="center">int</td><td align="center">size()</td><td align="center">返回写到数据输出流中的字节数</td></tr><tr><td align="center">void</td><td align="center">flush()</td><td align="center">清空输出流，使所有缓冲中的字节被写出到流中</td></tr></tbody></table><h1 id="5、缓冲流"><a href="#5、缓冲流" class="headerlink" title="5、缓冲流"></a>5、缓冲流</h1><p>​    缓冲流是在实体I/O流基础上增加一个缓冲区，应用程序和I/O设备之间的数据传输都要经过缓冲区来进行。</p><p>​    缓冲流分为缓冲输入流和缓冲输出流。</p><p>​    缓冲输入流是将从输入流读入的字节/字符数据先存在缓冲区中，应用程序从缓冲区而不是从输入流读取数据；</p><p>​    缓冲输出流是在进行数据输出时先把数据存在缓冲区中，当缓冲区满时再一次性地写到输出流中。</p><p>​    使用缓冲流可以减少应用程序与I/O设备之间的访问次数，提高传输效率；</p><p>​    可以对缓冲区中的数据进行按需访问和预处理，增加访问的灵活性。</p><h2 id="5-1-缓冲输入流"><a href="#5-1-缓冲输入流" class="headerlink" title="5.1 缓冲输入流"></a>5.1 缓冲输入流</h2><p>​    包括字节缓冲输入流BufferedInputStream类和字符缓冲输入流BufferedReader类。</p><h3 id="5-1-1-字节缓冲输入流BufferedInputStream类"><a href="#5-1-1-字节缓冲输入流BufferedInputStream类" class="headerlink" title="5.1.1 字节缓冲输入流BufferedInputStream类"></a>5.1.1 字节缓冲输入流BufferedInputStream类</h3><p>​    先通过实体输入流（例如FileInputStream类）对象逐一读取字节数据并存入缓冲区，应用程序则从缓冲区中读取数据。<br>​    构造方法：</p><p><code>public BufferedInputStream(InputStream in)</code></p><p><code>public BufferedInputStream(InputStream in,int size)</code></p><p>​    size:指定缓冲区的大小。</p><p>​    BufferedInputStream类继承自InputStream，所以该类的方法与InputStream类的方法相同。</p><h3 id="5-1-2-字符缓冲输入流BufferedReader类"><a href="#5-1-2-字符缓冲输入流BufferedReader类" class="headerlink" title="5.1.2 字符缓冲输入流BufferedReader类"></a>5.1.2 字符缓冲输入流BufferedReader类</h3><p>​    与字节缓冲输入流BufferedInputStream类在功能和实现上基本相同。它只适用于字符读入。</p><p>​    构造方法：</p><p><code>public BufferedReader(Reader in)</code></p><p><code>public BufferedReader(Reader in,int sz)</code></p><p>​    BufferedReader类继承自Reader，所以该类的方法与Reader类的方法相同。</p><p>​    新增按行读取的方法：<code>String readLine()</code></p><p>​    该方法返回值为该行不包含结束符的字符串内容，如果已到达流末尾，则返回 null。</p><h2 id="5-2-缓冲输出流"><a href="#5-2-缓冲输出流" class="headerlink" title="5.2 缓冲输出流"></a>5.2 缓冲输出流</h2><p>​    缓冲输出流包括字节缓冲输出流BufferedOutputStream类和字符缓冲输出流BufferedWriter类。</p><h3 id="5-2-1-字节缓冲输出流BufferedOutputStream类"><a href="#5-2-1-字节缓冲输出流BufferedOutputStream类" class="headerlink" title="5.2.1 字节缓冲输出流BufferedOutputStream类"></a>5.2.1 字节缓冲输出流BufferedOutputStream类</h3><p>​    完成输出操作时，先将字节数据写入缓冲区，当缓冲区满时，再把缓冲区中的所有数据一次性写到底层输出流中。</p><p>​    构造方法： </p><p><code>public BufferedOutputStream(OutputStream out)</code><br><code>public BufferedOutputStream(OutputStream out,int size)</code></p><p>​    BufferedOutputStream类继承自OutputStream，所以该类的方法与OutputStream类的方法相同。</p><h3 id="5-2-2-字符缓冲输出流BufferedWriter类"><a href="#5-2-2-字符缓冲输出流BufferedWriter类" class="headerlink" title="5.2.2 字符缓冲输出流BufferedWriter类"></a>5.2.2 字符缓冲输出流BufferedWriter类</h3><p>​    与字节缓冲输出流BufferedOutputStream类在功能和实现上是相同的。只适用于字符输出。</p><p>​    BufferedWriter类的构造方法：</p><p><code>public BufferedWriter(Writer out)</code><br><code>public BufferedWriterr(Writer out,int sz)</code></p><p>​    BufferedWriter类继承自Writer，所以该类的方法与Writer类的方法相同。</p><p>​    新增写行分隔符的方法：<code>String newLine()</code>行分隔符字符串由系统属性 line.separator 定义。</p><h1 id="6、-随机流"><a href="#6、-随机流" class="headerlink" title="6、 随机流"></a>6、 随机流</h1><p>​    随机流RandomAccessFile类创建的对象既可以作为输入流，也可以作为输出流，因此建立一个随机流就可以完成读写操作。</p><p>​    RandomAccessFile类是java.lang.Object根类的子类。</p><p>​    RandomAccessFile类的实例对象支持对随机访问文件的读取和写入。</p><p>​    随机流可以用于多线程下载或多个线程同时写数据到文件，为快速完成访问提供了便利。</p><h2 id="6-1-RandomAccessFile类"><a href="#6-1-RandomAccessFile类" class="headerlink" title="6.1  RandomAccessFile类"></a>6.1  RandomAccessFile类</h2><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="center">RandomAccessFile(String name, String mode)</td><td align="center">参数name为待访问的文件名，file待访问的文件。参数mode为读写模式，常用的值有：“r”以只读方式打开文件，如果进行写操作会产生异常；“rw”：以读写方式打开文件，如果文件不存在，则创建</td></tr><tr><td align="center"></td><td align="center">RandomAccessFile(File file, String mode)</td><td align="center">同上</td></tr><tr><td align="center">int</td><td align="center">read()</td><td align="center">从文件中读取一个数据字节并以整数形式返回此字节</td></tr><tr><td align="center">int</td><td align="center">read(byte[] b)</td><td align="center">从文件中读取最多b.length 个数据字节到b数组中，并返回实际读取的字节数</td></tr><tr><td align="center">int</td><td align="center">read(byte[] b, int off, int len)</td><td align="center">从文件中读取len个字节数据到b数组中。off为字节在数组中存放的地址</td></tr><tr><td align="center">XXX</td><td align="center">readXXX()</td><td align="center">从文件中读取一个XXX类型数据，XXX包括：boolean，byte，char，short，int，lang，float，double</td></tr><tr><td align="center">void</td><td align="center">write(int b)</td><td align="center">写入指定的字节</td></tr><tr><td align="center">void</td><td align="center">write(byte[] b)</td><td align="center">写入字节数组内容到文件</td></tr></tbody></table><p>|   void   |              writeXXX<br>(XXX v)               | 写入指定类型数据到文件，XXX包括：boolean，byte，char，short，int，lang，float，double |<br>|   void   |            writeChars(String s)            |                       写入字符串到文件                       |<br>|   void   |             writeUTF(String s)             |              按UTF-8编码形式将字符串写入到文件               |<br>|   long   |              getFilePointer()              |                     获取文件的当前偏移量                     |<br>|   void   |               seek(long pos)               |                     设置文件的指针偏移量                     |<br>|   long   |                  length()                  |                        获取文件的长度                        |<br>|   void   |         setLength(long newLength)          | 设置此文件的长度。 如果 length 方法返回的文件的现有长度大于 newLength 参数，则该文件将被截短。超过则加大文件，多出部分没有内容 |<br>|   int    |              skipBytes(int n)              |             跳过输入的 n 个字节并丢弃跳过的字节              |<br>|   void   |                  close()                   |                     关闭文件流，释放资源                     |</p><p>​    由于编码格式不同当进行字符串读取的时候，有时会出现“乱码”的现象。</p><p>​    对字符串重新进行编码可以解决乱码问题：</p><ul><li>先读字符串：<br><code>String str = in.readLine();</code></li><li>再将字符串恢复成标准字节数组：<br><code>byte [] b=str.getBytes(“iso-8859-1”);</code></li><li>最后将字节数组按当前机器的默认编码重新转化为字符串：<br><code>String result=new String(b);</code></li><li>显式地指明编码类型，可以直接给出编码类型：<br><code>String result=new String(b,”GB2312”);</code></li></ul><h1 id="7、对象流"><a href="#7、对象流" class="headerlink" title="7、对象流"></a>7、对象流</h1><p>​    对象流是在实体流基础上，通过对对象数据的处理和变换，实现对象的永久保存和读取。</p><p>​    ObjectInputStream和ObjectOutputStream分别是对象输入流类和对象输出流类，它们也是InputStream和OutputStream类的子类。</p><p>​    通过对象输出流，可以把对象写入到文件或进行网络传输。</p><p>​    对象输入流类可以从文件或网络上，把读取的数据还原成对象。</p><p>​    要想实现对象的传输，待传输的对象要先进行序列化处理，才能保证对象能准确地保存和读取。</p><h2 id="7-1-对象的序列化"><a href="#7-1-对象的序列化" class="headerlink" title="7.1 对象的序列化"></a>7.1 对象的序列化</h2><p>​    对象的序列化是指把对象转换成字节序列的过程，而把字节序列恢复为对象的过程称为对象的反序列化。</p><p>​    一个类如果实现了java.io.Serializable接口，这个类的实例（对象）就是一个序列化的对象。</p><p>​    Serializable接口中没有方法。实现了该接口的对象进行输出时，JVM将按照一定的格式（序列化信息）转换成字节进行传输和存储到目的地。</p><p>​    对象输入流从文件或网络上读取对象时，会先读取对象的序列化信息，并根据这一信息创建对象。</p><h2 id="7-2-对象输入流与对象输出流"><a href="#7-2-对象输入流与对象输出流" class="headerlink" title="7.2 对象输入流与对象输出流"></a>7.2 对象输入流与对象输出流</h2><h3 id="7-2-1-对象输入流ObjectInputStream类"><a href="#7-2-1-对象输入流ObjectInputStream类" class="headerlink" title="7.2.1 对象输入流ObjectInputStream类"></a>7.2.1 对象输入流ObjectInputStream类</h3><p>​    实现对象的输入操作。构造方法：</p><p>   <code> public ObjectInputStream(InputStream in)</code></p><p>​    类中的方法：<code>Object readObject()</code>从ObjectInputStream流中读取对象。</p><h3 id="7-2-2-对象输出流ObjectOutputStream类"><a href="#7-2-2-对象输出流ObjectOutputStream类" class="headerlink" title="7.2.2 对象输出流ObjectOutputStream类"></a>7.2.2 对象输出流ObjectOutputStream类</h3><p>​    实现对象的输出操作。构造方法：</p><p>​    <code>public ObjectOutputStream(OutputStream out)</code></p><p>​    类中的方法：<code>void writeObject(Object o)</code>将指定对象o写入ObjectOutputStream流中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    &lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://gigsider.com/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://gigsider.com/tags/JAVA/"/>
    
      <category term="IO流" scheme="https://gigsider.com/tags/IO%E6%B5%81/"/>
    
  </entry>
  
</feed>
